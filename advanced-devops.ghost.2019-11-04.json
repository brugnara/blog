{"db":[{"meta":{"exported_on":1572871663443,"version":"009"},"data":{"posts":[{"id":1,"uuid":"bd4b0bb4-56f4-42c9-a281-b030b8560ca9","title":"Welcome to Ghost","slug":"welcome-to-ghost","markdown":"You're live! Nice. We've put together a little post to introduce you to the Ghost editor and get you started. You can manage your content by signing in to the admin area at `<your blog URL>/ghost/`. When you arrive, you can select this post from a list on the left and see a preview of it on the right. Click the little pencil icon at the top of the preview to edit this post and read the next section!\n\n## Getting Started\n\nGhost uses something called Markdown for writing. Essentially, it's a shorthand way to manage your post formatting as you write!\n\nWriting in Markdown is really easy. In the left hand panel of Ghost, you simply write as you normally would. Where appropriate, you can use *shortcuts* to **style** your content. For example, a list:\n\n* Item number one\n* Item number two\n    * A nested item\n* A final item\n\nor with numbers!\n\n1. Remember to buy some milk\n2. Drink the milk\n3. Tweet that I remembered to buy the milk, and drank it\n\n### Links\n\nWant to link to a source? No problem. If you paste in a URL, like http://ghost.org - it'll automatically be linked up. But if you want to customise your anchor text, you can do that too! Here's a link to [the Ghost website](http://ghost.org). Neat.\n\n### What about Images?\n\nImages work too! Already know the URL of the image you want to include in your article? Simply paste it in like this to make it show up:\n\n![The Ghost Logo](https://ghost.org/images/ghost.png)\n\nNot sure which image you want to use yet? That's ok too. Leave yourself a descriptive placeholder and keep writing. Come back later and drag and drop the image in to upload:\n\n![A bowl of bananas]\n\n\n### Quoting\n\nSometimes a link isn't enough, you want to quote someone on what they've said. Perhaps you've started using a new blogging platform and feel the sudden urge to share their slogan? A quote might be just the way to do it!\n\n> Ghost - Just a blogging platform\n\n### Working with Code\n\nGot a streak of geek? We've got you covered there, too. You can write inline `<code>` blocks really easily with back ticks. Want to show off something more comprehensive? 4 spaces of indentation gets you there.\n\n    .awesome-thing {\n        display: block;\n        width: 100%;\n    }\n\n### Ready for a Break? \n\nThrow 3 or more dashes down on any new line and you've got yourself a fancy new divider. Aw yeah.\n\n---\n\n### Advanced Usage\n\nThere's one fantastic secret about Markdown. If you want, you can write plain old HTML and it'll still work! Very flexible.\n\n<input type=\"text\" placeholder=\"I'm an input field!\" />\n\nThat should be enough to get you started. Have fun - and let us know what you think :)","mobiledoc":null,"html":"<p>You're live! Nice. We've put together a little post to introduce you to the Ghost editor and get you started. You can manage your content by signing in to the admin area at <code>&lt;your blog URL&gt;/ghost/</code>. When you arrive, you can select this post from a list on the left and see a preview of it on the right. Click the little pencil icon at the top of the preview to edit this post and read the next section!</p>\n\n<h2 id=\"gettingstarted\">Getting Started</h2>\n\n<p>Ghost uses something called Markdown for writing. Essentially, it's a shorthand way to manage your post formatting as you write!</p>\n\n<p>Writing in Markdown is really easy. In the left hand panel of Ghost, you simply write as you normally would. Where appropriate, you can use <em>shortcuts</em> to <strong>style</strong> your content. For example, a list:</p>\n\n<ul>\n<li>Item number one</li>\n<li>Item number two\n<ul><li>A nested item</li></ul></li>\n<li>A final item</li>\n</ul>\n\n<p>or with numbers!</p>\n\n<ol>\n<li>Remember to buy some milk  </li>\n<li>Drink the milk  </li>\n<li>Tweet that I remembered to buy the milk, and drank it</li>\n</ol>\n\n<h3 id=\"links\">Links</h3>\n\n<p>Want to link to a source? No problem. If you paste in a URL, like <a href=\"http://ghost.org\">http://ghost.org</a> - it'll automatically be linked up. But if you want to customise your anchor text, you can do that too! Here's a link to <a href=\"http://ghost.org\">the Ghost website</a>. Neat.</p>\n\n<h3 id=\"whataboutimages\">What about Images?</h3>\n\n<p>Images work too! Already know the URL of the image you want to include in your article? Simply paste it in like this to make it show up:</p>\n\n<p><img src=\"https://ghost.org/images/ghost.png\" alt=\"The Ghost Logo\" /></p>\n\n<p>Not sure which image you want to use yet? That's ok too. Leave yourself a descriptive placeholder and keep writing. Come back later and drag and drop the image in to upload:</p>\n\n<h3 id=\"quoting\">Quoting</h3>\n\n<p>Sometimes a link isn't enough, you want to quote someone on what they've said. Perhaps you've started using a new blogging platform and feel the sudden urge to share their slogan? A quote might be just the way to do it!</p>\n\n<blockquote>\n  <p>Ghost - Just a blogging platform</p>\n</blockquote>\n\n<h3 id=\"workingwithcode\">Working with Code</h3>\n\n<p>Got a streak of geek? We've got you covered there, too. You can write inline <code>&lt;code&gt;</code> blocks really easily with back ticks. Want to show off something more comprehensive? 4 spaces of indentation gets you there.</p>\n\n<pre><code>.awesome-thing {\n    display: block;\n    width: 100%;\n}\n</code></pre>\n\n<h3 id=\"readyforabreak\">Ready for a Break?</h3>\n\n<p>Throw 3 or more dashes down on any new line and you've got yourself a fancy new divider. Aw yeah.</p>\n\n<hr />\n\n<h3 id=\"advancedusage\">Advanced Usage</h3>\n\n<p>There's one fantastic secret about Markdown. If you want, you can write plain old HTML and it'll still work! Very flexible.</p>\n\n<p><input type=\"text\" placeholder=\"I'm an input field!\" /></p>\n\n<p>That should be enough to get you started. Have fun - and let us know what you think :)</p>","amp":null,"image":null,"featured":0,"page":0,"status":"draft","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2017-01-27 22:16:56","created_by":1,"updated_at":"2017-01-28 08:31:16","updated_by":1,"published_at":"2017-01-27 22:16:56","published_by":1},{"id":2,"uuid":"d27b26bc-d4b5-465f-82d4-929361e408ac","title":"Ghost. A fresh start","slug":"ghost-a-fresh-start","markdown":"As first post for this new tech blog, I am going to introduce you on how to install Ghost on you very own server, with Docker.\n\n# Introduction\n\nI always create a `start.sh` for each container I want to start, with all the properties in place. This allow me to backup with git, all my containers configuration scripts.\n\n# Folder structure\n\n    mkdir starters/ghost && cd $_\n    mkdir data && touch config.js start.sh\n    chmod +x start.sh\n\n# config.js\n\nThis file contains the needed configurations for Ghost, like `email` and the most important, the `host`. If you need more details, check [this](http://support.ghost.org/config/).\n\n> Be sure to change `mail.options.auth.pass` and `url` fields.\n\n    // # Ghost Configuration\n    // Setup your Ghost install for various [environments](http://support.ghost.org/config/#about-environments).\n\n    // Ghost runs in `development` mode by default. Full documentation can be found at http://support.ghost.org/config/\n\n    var path = require('path'), config;\n\n    config = {\n        // ### Production\n        // When running Ghost in the wild, use the production environment.\n        // Configure your URL and mail settings here\n        production: {\n            url: 'http://daniele.brugnara.me',\n            database: {\n                client: 'sqlite3',\n                connection: {\n                    filename: path.join(process.env.GHOST_CONTENT, '/data/ghost.db')\n                },\n                debug: false\n            },\n\n            server: {\n                host: '0.0.0.0',\n                port: '2368'\n            },\n\n            mail: {\n                  transport: 'SMTP',\n                  options: {\n                      service: 'Mailgun',\n                      auth: {\n                          user: 'postmaster@brugnara.me', // mailgun username\n                          pass: '<password here>'  // mailgun password\n                      }\n                  }\n            },\n        }\n    };\n\n    module.exports = config;\n\n# start.sh\n\nPut the following script in your `config.js`.\n\n> replace the port `8080` with the one you want use.\n> do the very same for the `--name`\n\n    docker run -d \\\n      --restart=always \\\n      -v $PWD/data:/var/lib/ghost/data \\\n      -v $PWD/config.js:/var/lib/ghost/config.js \\\n      -p 8080:2368 \\\n      --name daniele.brugnara.me \\\n      ghost:latest \\\n      /bin/bash -c 'npm start --production'\n\n# first run\n\nsimple as\n\n    ./start.sh\n\nCheck everything is working as expected:\n\n    docker logs -f daniele.brugnara.me\n\n    > ghost@0.11.4 start /usr/src/ghost\n    > node index\n\n    Ghost is running in production...\n    Your blog is now available on http://daniele.brugnara.me\n    Ctrl+C to shut down\n\n# backup your blog\n\nYou can do daily backup the data folder, which contains the `ghost.db` sqlite database file.\n\n# nginx\n\nThe last thing to do, is to let your Nginx proxy the requests to the backend. This is a simple configuration file you will put in your `/etc/nginx/sites-available/yourblog.domain.com`. Remember to set `server_name` with your domain and to set the right port in `proxy_pass`\n\n    server {\n      listen                *:80;\n\n      server_name           daniele.brugnara.me;\n\n      access_log            /var/log/nginx/blog.access.log;\n      error_log             /var/log/nginx/blog.error.log;\n\n      location / {\n        proxy_pass http://127.0.0.1:8080;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade; \n        proxy_set_header Connection 'upgrade';\n        proxy_set_header X-Forwarded-For $remote_addr;\n      }\n    }\n\nNow go to `/etc/nginx/sites-enabled/` and do\n\n    ln -s ../sites-available/yourblog.domain.com yourblog.domain.com\n    /etx/init.d/nginx restart\n\n# DNS\n\nIf not already done, configure your `DNS` to point to the server' public IP. \n\n\n","mobiledoc":null,"html":"<p>As first post for this new tech blog, I am going to introduce you on how to install Ghost on you very own server, with Docker.</p>\n\n<h1 id=\"introduction\">Introduction</h1>\n\n<p>I always create a <code>start.sh</code> for each container I want to start, with all the properties in place. This allow me to backup with git, all my containers configuration scripts.</p>\n\n<h1 id=\"folderstructure\">Folder structure</h1>\n\n<pre><code>mkdir starters/ghost &amp;&amp; cd $_\nmkdir data &amp;&amp; touch config.js start.sh\nchmod +x start.sh\n</code></pre>\n\n<h1 id=\"configjs\">config.js</h1>\n\n<p>This file contains the needed configurations for Ghost, like <code>email</code> and the most important, the <code>host</code>. If you need more details, check <a href=\"http://support.ghost.org/config/\">this</a>.</p>\n\n<blockquote>\n  <p>Be sure to change <code>mail.options.auth.pass</code> and <code>url</code> fields.</p>\n</blockquote>\n\n<pre><code>// # Ghost Configuration\n// Setup your Ghost install for various [environments](http://support.ghost.org/config/#about-environments).\n\n// Ghost runs in `development` mode by default. Full documentation can be found at http://support.ghost.org/config/\n\nvar path = require('path'), config;\n\nconfig = {\n    // ### Production\n    // When running Ghost in the wild, use the production environment.\n    // Configure your URL and mail settings here\n    production: {\n        url: 'http://daniele.brugnara.me',\n        database: {\n            client: 'sqlite3',\n            connection: {\n                filename: path.join(process.env.GHOST_CONTENT, '/data/ghost.db')\n            },\n            debug: false\n        },\n\n        server: {\n            host: '0.0.0.0',\n            port: '2368'\n        },\n\n        mail: {\n              transport: 'SMTP',\n              options: {\n                  service: 'Mailgun',\n                  auth: {\n                      user: 'postmaster@brugnara.me', // mailgun username\n                      pass: '&lt;password here&gt;'  // mailgun password\n                  }\n              }\n        },\n    }\n};\n\nmodule.exports = config;\n</code></pre>\n\n<h1 id=\"startsh\">start.sh</h1>\n\n<p>Put the following script in your <code>config.js</code>.</p>\n\n<blockquote>\n  <p>replace the port <code>8080</code> with the one you want use.\n  do the very same for the <code>--name</code></p>\n</blockquote>\n\n<pre><code>docker run -d \\\n  --restart=always \\\n  -v $PWD/data:/var/lib/ghost/data \\\n  -v $PWD/config.js:/var/lib/ghost/config.js \\\n  -p 8080:2368 \\\n  --name daniele.brugnara.me \\\n  ghost:latest \\\n  /bin/bash -c 'npm start --production'\n</code></pre>\n\n<h1 id=\"firstrun\">first run</h1>\n\n<p>simple as</p>\n\n<pre><code>./start.sh\n</code></pre>\n\n<p>Check everything is working as expected:</p>\n\n<pre><code>docker logs -f daniele.brugnara.me\n\n&gt; ghost@0.11.4 start /usr/src/ghost\n&gt; node index\n\nGhost is running in production...\nYour blog is now available on http://daniele.brugnara.me\nCtrl+C to shut down\n</code></pre>\n\n<h1 id=\"backupyourblog\">backup your blog</h1>\n\n<p>You can do daily backup the data folder, which contains the <code>ghost.db</code> sqlite database file.</p>\n\n<h1 id=\"nginx\">nginx</h1>\n\n<p>The last thing to do, is to let your Nginx proxy the requests to the backend. This is a simple configuration file you will put in your <code>/etc/nginx/sites-available/yourblog.domain.com</code>. Remember to set <code>server_name</code> with your domain and to set the right port in <code>proxy_pass</code></p>\n\n<pre><code>server {\n  listen                *:80;\n\n  server_name           daniele.brugnara.me;\n\n  access_log            /var/log/nginx/blog.access.log;\n  error_log             /var/log/nginx/blog.error.log;\n\n  location / {\n    proxy_pass http://127.0.0.1:8080;\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade $http_upgrade; \n    proxy_set_header Connection 'upgrade';\n    proxy_set_header X-Forwarded-For $remote_addr;\n  }\n}\n</code></pre>\n\n<p>Now go to <code>/etc/nginx/sites-enabled/</code> and do</p>\n\n<pre><code>ln -s ../sites-available/yourblog.domain.com yourblog.domain.com\n/etx/init.d/nginx restart\n</code></pre>\n\n<h1 id=\"dns\">DNS</h1>\n\n<p>If not already done, configure your <code>DNS</code> to point to the server' public IP. </p>","amp":null,"image":null,"featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2017-01-28 08:31:40","created_by":1,"updated_at":"2017-01-28 09:15:17","updated_by":1,"published_at":"2017-01-28 09:13:13","published_by":1},{"id":3,"uuid":"28eaae85-3bd9-4184-861c-4180a1050a17","title":"Are microservices bad?","slug":"are-microservices-bad","markdown":"One of the most recurring argument on the web about DevOps, is microservices and how useful those are.\n\n## But.. Microservices are good!\n\nIt only depends how many they are and how much time you plan to allocate maintaining them. We had about ten microservices. Each one doing something very specific. \n\nA good application, in my opinion, is for large business where you have different IT departments, also maybe with different knowledges. You can afford to have a server in Java and another in NodeJS, for example.\n\n## Maintaining microservices\n\nIn a team where you have many developers, you will be easily able to solve bugs and upgrade modules when security patch are released.\n\nIf your company has only a few developers, microservices are very bad. The time you put gluing pieces together is too much and the result is a slow process in delivery your software.\n\n## HA\n\nYou have to think about this. Clustering many services needs more hardware resources and obviously, not for free. I will write a specific post about this.\n\n## Reality\n\nYou may not have many developers. If is this the case, there is no need to split the code into many pieces. Separating concerns is good but excessive fragmentation easily become the bad.\n\nSometimes you have to patch a dozen of microservices just because a new security fix for a package you use on every single service, came out. This is very time consuming and time is money, full stop.\n\nWe had a dozen of microservices in production. Patched them many times. Spent a lot of time in maintenance. \n\nDiscovering how many services we had, was a very «funny» and expensive task. As an addition, each developer wrote the code in the best way in that moment was good to, but that way was not good for the the rest of the services, leaved unmaintained for months, becoming the ugly service-no-one-want-to-put-his/her-hands-on just because the framework used was not funny anymore.\n\nIf you like, read this article to better understand how it feels writing Javascript. https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f#.rgiji2j7d)\n\n### We, some months ago\n\nHere's a list of services we had in production, each with a different NodeJS version, each with a different framework, many without framework, just code put together:\n\n- login\n- signup\n- portal\n- portal-legacy (for some old partner, ruby made)\n- dashboard (ruby made)\n- radius-to-our-services connector\n- proximity framework\n- statistics calculator\n\n## We, now: a monolithic core\n\nThe right solution for us, was to put all services together. As a result, we now have a unique entry point for our services doing all we need. It's easy to fix bugs, just because the framework is one, well known and documented. Understood how it works, you can easily put your hands in every single part of it.\n\nAs a result of many months of refactoring, we now have a super-tested core, with many modules, each of those, is using the same paradigm and this is good.\n\n## Conclusion\n\nMicroservices are not as bad as you think but can easily drive you in hell, so be careful and think twice before splitting your codebase.","mobiledoc":null,"html":"<p>One of the most recurring argument on the web about DevOps, is microservices and how useful those are.</p>\n\n<h2 id=\"butmicroservicesaregood\">But.. Microservices are good!</h2>\n\n<p>It only depends how many they are and how much time you plan to allocate maintaining them. We had about ten microservices. Each one doing something very specific. </p>\n\n<p>A good application, in my opinion, is for large business where you have different IT departments, also maybe with different knowledges. You can afford to have a server in Java and another in NodeJS, for example.</p>\n\n<h2 id=\"maintainingmicroservices\">Maintaining microservices</h2>\n\n<p>In a team where you have many developers, you will be easily able to solve bugs and upgrade modules when security patch are released.</p>\n\n<p>If your company has only a few developers, microservices are very bad. The time you put gluing pieces together is too much and the result is a slow process in delivery your software.</p>\n\n<h2 id=\"ha\">HA</h2>\n\n<p>You have to think about this. Clustering many services needs more hardware resources and obviously, not for free. I will write a specific post about this.</p>\n\n<h2 id=\"reality\">Reality</h2>\n\n<p>You may not have many developers. If is this the case, there is no need to split the code into many pieces. Separating concerns is good but excessive fragmentation easily become the bad.</p>\n\n<p>Sometimes you have to patch a dozen of microservices just because a new security fix for a package you use on every single service, came out. This is very time consuming and time is money, full stop.</p>\n\n<p>We had a dozen of microservices in production. Patched them many times. Spent a lot of time in maintenance. </p>\n\n<p>Discovering how many services we had, was a very «funny» and expensive task. As an addition, each developer wrote the code in the best way in that moment was good to, but that way was not good for the the rest of the services, leaved unmaintained for months, becoming the ugly service-no-one-want-to-put-his/her-hands-on just because the framework used was not funny anymore.</p>\n\n<p>If you like, read this article to better understand how it feels writing Javascript. <a href=\"https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f#.rgiji2j7d\">https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f#.rgiji2j7d</a>)</p>\n\n<h3 id=\"wesomemonthsago\">We, some months ago</h3>\n\n<p>Here's a list of services we had in production, each with a different NodeJS version, each with a different framework, many without framework, just code put together:</p>\n\n<ul>\n<li>login</li>\n<li>signup</li>\n<li>portal</li>\n<li>portal-legacy (for some old partner, ruby made)</li>\n<li>dashboard (ruby made)</li>\n<li>radius-to-our-services connector</li>\n<li>proximity framework</li>\n<li>statistics calculator</li>\n</ul>\n\n<h2 id=\"wenowamonolithiccore\">We, now: a monolithic core</h2>\n\n<p>The right solution for us, was to put all services together. As a result, we now have a unique entry point for our services doing all we need. It's easy to fix bugs, just because the framework is one, well known and documented. Understood how it works, you can easily put your hands in every single part of it.</p>\n\n<p>As a result of many months of refactoring, we now have a super-tested core, with many modules, each of those, is using the same paradigm and this is good.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Microservices are not as bad as you think but can easily drive you in hell, so be careful and think twice before splitting your codebase.</p>","amp":null,"image":null,"featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2017-01-30 21:20:15","created_by":1,"updated_at":"2017-01-31 18:10:46","updated_by":1,"published_at":"2017-01-31 10:54:43","published_by":1},{"id":4,"uuid":"0000211e-b48a-4698-bb04-728abcde8c82","title":"High Availability","slug":"high-availability","markdown":"Having a good software is not enough. Just ask GitLab IT guys about [what recently happened](https://docs.google.com/document/d/1GCK53YDcBWQveod9kfzW-VCxIABGiryG7_z_6jHdVik/pub).\n\n## Intro\n\nSpeaking about a production environment, you can not trust your servers. Never trust your system. \n\nEvery single service must be in HA. But, what is HA?\n\nThis short post, will introduce you to HA, this is not a full guide but a simple use case explanation.\n\n## HA in a nutshell\n\nHA is when you have at least two resources, working alone or together. The goal is to have al least one working resource if one fails. \n\nYou can provide HA in different ways, choose the one you prefer depending on your situation and knowledges, here's a short list\n\n- shared IP\n- load balancer\n- live migration\n\n## The best HA solution\n\nThere is not a best solution that fits each case. You have to understand what is best for you and read the documentation, first.\n\n## Real application\n\nWhen you have to deploy, you have to guarantee your customers to not have downtime. For a zero downtime deploy, you have to rely on HA. In our server farm, we have two servers for our api service. Those servers are in a round-robin configuration, handled by a shared IP HAproxy. When an api server is shutted down, HAproxy sends all the requests to the one server alive. Then the server is started with the new version, and requests are sent to both servers again. After a few seconds, we shut down the other one and the circle is closed with no downtime. \n\nAll this process is handled with a simple deploy script. We are planning to move to Jenkins, but for now a simple bash fits as a fiddle.\n\n## Microservices\n\nAs I told in a previous post, if you want to split the codebase in many microservices, you also have to think about HA them.\n\n## HAproxy\n\nHere's an example for a round-robin configuration for a web service, with a third server as backup. The `backup` is used only if both `server01` and `server02` are down.\n\n    backend sms.freeluna.it\n      mode http\n      server server01.brugnara.me 192.168.10.51:8080 check port 8080\n      server server02.brugnara.me 192.168.10.52:8080 check port 8080\n      server backup01.brugnara.me 192.168.10.151:8080 check port 8080 backup\n      balance roundrobin\n      option forwardfor\n      option httpclose\n      option http-server-close\n      option httpchk GET /alive HTTP/1.1","mobiledoc":null,"html":"<p>Having a good software is not enough. Just ask GitLab IT guys about <a href=\"https://docs.google.com/document/d/1GCK53YDcBWQveod9kfzW-VCxIABGiryG7_z_6jHdVik/pub\">what recently happened</a>.</p>\n\n<h2 id=\"intro\">Intro</h2>\n\n<p>Speaking about a production environment, you can not trust your servers. Never trust your system. </p>\n\n<p>Every single service must be in HA. But, what is HA?</p>\n\n<p>This short post, will introduce you to HA, this is not a full guide but a simple use case explanation.</p>\n\n<h2 id=\"hainanutshell\">HA in a nutshell</h2>\n\n<p>HA is when you have at least two resources, working alone or together. The goal is to have al least one working resource if one fails. </p>\n\n<p>You can provide HA in different ways, choose the one you prefer depending on your situation and knowledges, here's a short list</p>\n\n<ul>\n<li>shared IP</li>\n<li>load balancer</li>\n<li>live migration</li>\n</ul>\n\n<h2 id=\"thebesthasolution\">The best HA solution</h2>\n\n<p>There is not a best solution that fits each case. You have to understand what is best for you and read the documentation, first.</p>\n\n<h2 id=\"realapplication\">Real application</h2>\n\n<p>When you have to deploy, you have to guarantee your customers to not have downtime. For a zero downtime deploy, you have to rely on HA. In our server farm, we have two servers for our api service. Those servers are in a round-robin configuration, handled by a shared IP HAproxy. When an api server is shutted down, HAproxy sends all the requests to the one server alive. Then the server is started with the new version, and requests are sent to both servers again. After a few seconds, we shut down the other one and the circle is closed with no downtime. </p>\n\n<p>All this process is handled with a simple deploy script. We are planning to move to Jenkins, but for now a simple bash fits as a fiddle.</p>\n\n<h2 id=\"microservices\">Microservices</h2>\n\n<p>As I told in a previous post, if you want to split the codebase in many microservices, you also have to think about HA them.</p>\n\n<h2 id=\"haproxy\">HAproxy</h2>\n\n<p>Here's an example for a round-robin configuration for a web service, with a third server as backup. The <code>backup</code> is used only if both <code>server01</code> and <code>server02</code> are down.</p>\n\n<pre><code>backend sms.freeluna.it\n  mode http\n  server server01.brugnara.me 192.168.10.51:8080 check port 8080\n  server server02.brugnara.me 192.168.10.52:8080 check port 8080\n  server backup01.brugnara.me 192.168.10.151:8080 check port 8080 backup\n  balance roundrobin\n  option forwardfor\n  option httpclose\n  option http-server-close\n  option httpchk GET /alive HTTP/1.1\n</code></pre>","amp":null,"image":null,"featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2017-02-02 07:51:43","created_by":1,"updated_at":"2017-02-11 08:50:59","updated_by":1,"published_at":"2017-02-11 08:50:17","published_by":1},{"id":5,"uuid":"772ba516-330c-452f-85fe-95e35bf9f0f2","title":"simple-cdd. A way to provision you machines effortless","slug":"simple-cdd-a-way-to-provision-you-machines-effortless","markdown":"## What is `simple-cdd`\n\nAs you can [read here](https://wiki.debian.org/Simple-CDD/), simple-cdd simply is a limited, though relatively easy to use tool to create a customized DebianInstaller CD.\n\nIt is a wrapper around debian-cd and mirroring tools used to create a customized DebianInstaller CD image. It takes a list of packages to install, and debconf pre-seeding files to pre-configure the installation. It has some support for multiple profiles and custom post-install scripts for things that can't be configured by debconf preseeding.\n\n## Mind your goal before start\n\nBefore provisioning an entire server farm, you should be well prepared on what your machines are going to do.\n\nIt is easy to underestimate the work needed to empower a consistent infrastructure and the more work you do before, the less pain you will encounter while deploying all together.\n\n## When you shouldn't use simple-cdd\n\nIf you have to handle web services and some simple server, this could be something too much for you. You can easily handle what you want with Docker or creating templates with your VM manager, like [Proxmox does](https://pve.proxmox.com/wiki/VM_Templates_and_Clones).\n\n## So you need simple-cdd, huh?\n\nGood to know you are still interested. Let's see in detail what this tool, can do and how to achieve some simple goals.\n\n## Goals\n\n- a customized Debian ISO with no questions during the install process\n- a template which installs MongoDB automatically\n- a second template which installs Docker automatically\n\nThese goals are very easy but let me to introduce you the pros and cons.\n\n### Preparation\n\n> Please be aware when you cut&paste snippets from this page. The blog engine used, appends some spaces on some lines. Those spaces will break in the case of package list, as an example. I'm very sorry about this.\n\nYou are going to need a fresh installed Debian, version 8 at the time of writing. After you have net-installed with nothing but an `ssh` server, you are almost ready.\n\n```\n# install simple-cdd\nsudo apt-get update && sudo apt-get install -y simple-cdd\n\n# cd ~\nmkdir -p cdd/profiles && cd cdd\n\n# create a fresh iso, is easy as typing\nbuild-simple-cdd\n```\n\n### How it works\n\nIn the folder we just created (`~/cdd`) we are going to save everything we need to create our ISO. The folder `~/cdd/profiles` will contain our profiles, divided into two file kind: `*.preseed`, `*.postinst` and `*.packages`.\n\nKeep in mind if profile named `default` exists, it will be installed with no questions, without any other profile, so this is what we are not going to do, since we want to choose what to install.\n\n#### *.packages\n\na simple text file with a package we want to be installed in every line\n\n#### *.preseed\n\na file, formatted with the standard rules [defined here](https://wiki.debian.org/DebianInstaller/Preseed). \n\n#### *.postinst\n\nan executable file, executed at the end of the installation process, as root in the installed system.\n\n### First profile\n\nLet's create a very simple profile. This profile will install `nano` if chosen.\n\n```\necho \"nano\" > profiles/test.packages\nbuild-simple-cdd --profiles test\n```\n\nThis will take a lot of time, depending on your internet connection. At the end, in the folder `./images` a iso will be ready to burn.\n\nMount the iso into a VM manager like VirtualBox or Proxmox. \nThe installer will ask you to select, if you want, a profile to install. Obviously we try our `test` profile. After the VM is installed, simply try typing `nano --version`.\n\n### No questions during the install process\n\nYou know how much boring is to install so many VM, each with the very same configuration. The same keyboard layout, the same timezone. The preseed files are going to help us.\n\nHere I am downloading the example preseed file [from debian official website](https://www.debian.org/releases/jessie/example-preseed.txt).\n```\ncurl https://www.debian.org/releases/jessie/example-preseed.txt > profiles/test.preseed\n\nnano profiles/test.preseed\n```\n\nMany params are in this file. Many can be ignored but we need to uncomment at least these (values for an italian Keyboard and timezone). With this file, nothing will be requested during the installation.\n\n```\n### Localization\n# Preseeding only locale sets language, country and locale.\nd-i debian-installer/locale string en_US\n\n# The values can also be preseeded individually for greater flexibility.\nd-i debian-installer/language string en\nd-i debian-installer/country string IT\nd-i debian-installer/locale string en_US.UTF-8\n\n# Keyboard selection.\nd-i keyboard-configuration/xkb-keymap select it\n\n# netcfg will choose an interface that has link if possible. This makes it\n# skip displaying a list if there is more than one interface.\nd-i netcfg/choose_interface select auto\n\n# Any hostname and domain names assigned from dhcp take precedence over\n# values set here. However, setting the values still prevents the questions\n# from being shown, even if values come from dhcp.\nd-i netcfg/get_hostname string unknown\nd-i netcfg/get_domain string brugnara.me\n\n# Disable that annoying WEP key dialog.\nd-i netcfg/wireless_wep string\n\n# This may be unwanted if using VM standard netcard\n# If non-free firmware is needed for the network or other hardware, you can\n# configure the installer to always try to load it, without prompting. Or\n# change to false to disable asking.\nd-i hw-detect/load_firmware boolean true\n\n### Mirror settings (selecting httpredir as hostname, the Country doesn't matter)\n# If you select ftp, the mirror/country string does not need to be set.\n#d-i mirror/protocol string ftp\nd-i mirror/country string Austria\nd-i mirror/http/hostname string httpredir.debian.org\nd-i mirror/http/directory string /debian\nd-i mirror/http/proxy string\n\n### Account setup\n# Skip creation of a root account (normal user account will be able to\n# use sudo).\nd-i passwd/root-login boolean false\n\n# Root password, either in clear text\nd-i passwd/root-password password Pa$$w0rd!RT!\nd-i passwd/root-password-again password Pa$$w0rd!RT!\n\n# To create a normal user account.\nd-i passwd/user-fullname string Devops\nd-i passwd/username string devops\n# Normal user's password, either in clear text\nd-i passwd/user-password password Dev0ps\nd-i passwd/user-password-again password Dev0ps\n\n### Clock and time zone setup\n# Controls whether or not the hardware clock is set to UTC.\nd-i clock-setup/utc boolean true\n\n# You may set this to any valid setting for $TZ; see the contents of\n# /usr/share/zoneinfo/ for valid values.\nd-i time/zone string Europe/Rome\n\n# Controls whether to use NTP to set the clock during the install\nd-i clock-setup/ntp boolean true\n\n### Partitioning\n## Partitioning example\n# If the system has free space you can choose to only partition that space.\n# This is only honoured if partman-auto/method (below) is not set.\nd-i partman-auto/init_automatically_partition select biggest_free\nd-i partman-auto/method string lvm\n\n# If one of the disks that are going to be automatically partitioned\n# contains an old LVM configuration, the user will normally receive a\n# warning. This can be preseeded away...\nd-i partman-lvm/device_remove_lvm boolean true\n# The same applies to pre-existing software RAID array:\nd-i partman-md/device_remove_md boolean true\n# And the same goes for the confirmation to write the lvm partitions.\nd-i partman-lvm/confirm boolean true\nd-i partman-lvm/confirm_nooverwrite boolean true\n\n# You can choose one of the three predefined partitioning recipes:\n# - atomic: all files in one partition\n# - home:   separate /home partition\n# - multi:  separate /home, /var, and /tmp partitions\nd-i partman-auto/choose_recipe select multi\n\n# This makes partman automatically partition without confirmation.\nd-i partman-md/confirm boolean true\nd-i partman-partitioning/confirm_write_new_label boolean true\nd-i partman/choose_partition select finish\nd-i partman/confirm boolean true\nd-i partman/confirm_nooverwrite boolean true\n\n### Apt setup\n# Select which update services to use; define the mirrors to be used.\n# Values shown below are the normal defaults.\nd-i apt-setup/services-select multiselect security, updates\nd-i apt-setup/security_host string security.debian.org\n\n# Individual additional packages to install\nd-i pkgsel/include string openssh-server build-essential python git ntp curl\n# Whether to upgrade packages after debootstrap.\n# Allowed values: none, safe-upgrade, full-upgrade\nd-i pkgsel/upgrade select none\n\n# Some versions of the installer can report back on what software you have\n# installed, and what software you use. The default is not to report back,\n# but sending reports helps the project determine what software is most\n# popular and include it on CDs.\npopularity-contest popularity-contest/participate boolean true\n\n# This is fairly safe to set, it makes grub install automatically to the MBR\n# if no other operating system is detected on the machine.\nd-i grub-installer/only_debian boolean true\n\n# This one makes grub-installer install to the MBR if it also finds some other\n# OS, which is less safe as it might not be able to boot that other OS.\nd-i grub-installer/with_other_os boolean true\n\n# Due notably to potential USB sticks, the location of the MBR can not be\n# To install to the first device (assuming it is not a USB stick):\nd-i grub-installer/bootdev  string default\n\n# Optional password for grub, either in clear text\nd-i grub-installer/password password !r00tme\nd-i grub-installer/password-again password !r00tme\n\n# Avoid that last message about the install being complete.\nd-i finish-install/reboot_in_progress note\n\n# This will prevent the installer from ejecting the CD during the reboot,\n# which is useful in some situations.\nd-i cdrom-detect/eject boolean true\n```\n\nRebuild the iso:\n\n```\n# since we didn't added any packages, we can skip recreating the mirror\nbuild-simple-cdd --profiles test --no-do-mirror\n```\n\nMount the iso and check everything is working as expected. You can change any param in that file, as requested by you.\n\n## Let's customize more\n\nSo you want to do something more, uh? What about installing MongoDB?\n\n```\necho '\napt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 0C49F3730359A14518585931BC711F9BA15703C6\n\necho \"deb http://repo.mongodb.org/apt/debian jessie/mongodb-org/3.4 main\" | tee /etc/apt/sources.list.d/mongodb-org-3.4.list\n\napt-get update\n\napt-get install -y mongodb-org-server\nservice mongod start\n\n# start on boot\nsystemctl enable mongod.service\n' > profiles/mongodb.postinst && chmod +x $_\n\nbuild-simple-cdd --profiles \"test,mongodb\" --no-do-mirror\n```\n\n## cdd.conf\n\nI prefer put the cdd build conf into a separate file, as you can see the --profiles flag becomes something to remember when you build your iso.\n\n```\necho '\nlocale=en_US\nkeyboard=it\nprofiles=test,mongodb\ndebian-mirror=\"ftp://ftp.at.debian.org/debian\"\n' > cdd.conf\n\n# we keep the flag --no-do-mirror out of the conf because we are likely going to not use it while creating new profiles with new packages which needs to be downloaded.\necho \"build-simple-cdd --conf ./cdd.conf --no-do-mirror\" > build.sh\necho \"build-simple-cdd --conf ./cdd.conf\" > full-build.sh\n\nchmod +x build.sh full-build.sh\n\n./build.sh\n``` \n\n## Docker\n\nIn this part we are going to see, how powerful profiles are.\n\n```\necho \"\napt-transport-https\ncurl\nca-certificates\nsoftware-properties-common\n\" > profiles/docker.packages\n\necho '\ncurl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -\necho  \"deb https://download.docker.com/linux/debian jessie stable\" > /etc/apt/sources.list.d/docker.list\n\napt-get update\napt-get -y install docker-ce\n\nservice docker start\n\n# enable docker to non root user\ngroupadd docker\nusermod -aG docker devops\n\n# start on boot\nsystemctl enable docker\n' > profiles/docker.postinst\n\n# build and test\n# add docker to profiles list in cdd.conf and then\n./full-build.sh\n```\n\n## Combine profiles\n\nYou can create as many profiles you want and use in a combination while installing your machines. In my case, I have a `base` profile with all the things we need and profiles like `mongodb` or `docker`, to finish the customization of a ready machine.\n\n## Backup\n\nAs you can easily backup the `profiles` folder, you can easily recreate your machines. \n\n## Security\n\nPreparing a good machine is the key. The goal is to don't have the need to enter as root into the machines, so in our `base` profile, the last executed command is `apt-get remove --purge sudo` so the machine is not editable. This prevent to lose some configuration done on the machine and not documented, as always happens...\n\n## Network\n\nYou may want to rename your host or simply set an IP. For us, the best solution, is a DHCP server, also able to set the hostname, [as argued here](http://daniele.brugnara.me/2017/03/18/dhcpd-name-your-machines/).\n\nEnjoy this wonderful and now well documented, tool!\n\n## February 2019 Update\n\nJust tested with Debian 9.8 with no issues.","mobiledoc":null,"html":"<h2 id=\"whatissimplecdd\">What is <code>simple-cdd</code></h2>\n\n<p>As you can <a href=\"https://wiki.debian.org/Simple-CDD/\">read here</a>, simple-cdd simply is a limited, though relatively easy to use tool to create a customized DebianInstaller CD.</p>\n\n<p>It is a wrapper around debian-cd and mirroring tools used to create a customized DebianInstaller CD image. It takes a list of packages to install, and debconf pre-seeding files to pre-configure the installation. It has some support for multiple profiles and custom post-install scripts for things that can't be configured by debconf preseeding.</p>\n\n<h2 id=\"mindyourgoalbeforestart\">Mind your goal before start</h2>\n\n<p>Before provisioning an entire server farm, you should be well prepared on what your machines are going to do.</p>\n\n<p>It is easy to underestimate the work needed to empower a consistent infrastructure and the more work you do before, the less pain you will encounter while deploying all together.</p>\n\n<h2 id=\"whenyoushouldntusesimplecdd\">When you shouldn't use simple-cdd</h2>\n\n<p>If you have to handle web services and some simple server, this could be something too much for you. You can easily handle what you want with Docker or creating templates with your VM manager, like <a href=\"https://pve.proxmox.com/wiki/VM_Templates_and_Clones\">Proxmox does</a>.</p>\n\n<h2 id=\"soyouneedsimplecddhuh\">So you need simple-cdd, huh?</h2>\n\n<p>Good to know you are still interested. Let's see in detail what this tool, can do and how to achieve some simple goals.</p>\n\n<h2 id=\"goals\">Goals</h2>\n\n<ul>\n<li>a customized Debian ISO with no questions during the install process</li>\n<li>a template which installs MongoDB automatically</li>\n<li>a second template which installs Docker automatically</li>\n</ul>\n\n<p>These goals are very easy but let me to introduce you the pros and cons.</p>\n\n<h3 id=\"preparation\">Preparation</h3>\n\n<blockquote>\n  <p>Please be aware when you cut&amp;paste snippets from this page. The blog engine used, appends some spaces on some lines. Those spaces will break in the case of package list, as an example. I'm very sorry about this.</p>\n</blockquote>\n\n<p>You are going to need a fresh installed Debian, version 8 at the time of writing. After you have net-installed with nothing but an <code>ssh</code> server, you are almost ready.</p>\n\n<pre><code># install simple-cdd\nsudo apt-get update &amp;&amp; sudo apt-get install -y simple-cdd\n\n# cd ~\nmkdir -p cdd/profiles &amp;&amp; cd cdd\n\n# create a fresh iso, is easy as typing\nbuild-simple-cdd  \n</code></pre>\n\n<h3 id=\"howitworks\">How it works</h3>\n\n<p>In the folder we just created (<code>~/cdd</code>) we are going to save everything we need to create our ISO. The folder <code>~/cdd/profiles</code> will contain our profiles, divided into two file kind: <code>*.preseed</code>, <code>*.postinst</code> and <code>*.packages</code>.</p>\n\n<p>Keep in mind if profile named <code>default</code> exists, it will be installed with no questions, without any other profile, so this is what we are not going to do, since we want to choose what to install.</p>\n\n<h4 id=\"packages\">*.packages</h4>\n\n<p>a simple text file with a package we want to be installed in every line</p>\n\n<h4 id=\"preseed\">*.preseed</h4>\n\n<p>a file, formatted with the standard rules <a href=\"https://wiki.debian.org/DebianInstaller/Preseed\">defined here</a>. </p>\n\n<h4 id=\"postinst\">*.postinst</h4>\n\n<p>an executable file, executed at the end of the installation process, as root in the installed system.</p>\n\n<h3 id=\"firstprofile\">First profile</h3>\n\n<p>Let's create a very simple profile. This profile will install <code>nano</code> if chosen.</p>\n\n<pre><code>echo \"nano\" &gt; profiles/test.packages  \nbuild-simple-cdd --profiles test  \n</code></pre>\n\n<p>This will take a lot of time, depending on your internet connection. At the end, in the folder <code>./images</code> a iso will be ready to burn.</p>\n\n<p>Mount the iso into a VM manager like VirtualBox or Proxmox. <br />\nThe installer will ask you to select, if you want, a profile to install. Obviously we try our <code>test</code> profile. After the VM is installed, simply try typing <code>nano --version</code>.</p>\n\n<h3 id=\"noquestionsduringtheinstallprocess\">No questions during the install process</h3>\n\n<p>You know how much boring is to install so many VM, each with the very same configuration. The same keyboard layout, the same timezone. The preseed files are going to help us.</p>\n\n<p>Here I am downloading the example preseed file <a href=\"https://www.debian.org/releases/jessie/example-preseed.txt\">from debian official website</a>.  </p>\n\n<pre><code>curl https://www.debian.org/releases/jessie/example-preseed.txt &gt; profiles/test.preseed\n\nnano profiles/test.preseed  \n</code></pre>\n\n<p>Many params are in this file. Many can be ignored but we need to uncomment at least these (values for an italian Keyboard and timezone). With this file, nothing will be requested during the installation.</p>\n\n<pre><code>### Localization\n# Preseeding only locale sets language, country and locale.\nd-i debian-installer/locale string en_US\n\n# The values can also be preseeded individually for greater flexibility.\nd-i debian-installer/language string en  \nd-i debian-installer/country string IT  \nd-i debian-installer/locale string en_US.UTF-8\n\n# Keyboard selection.\nd-i keyboard-configuration/xkb-keymap select it\n\n# netcfg will choose an interface that has link if possible. This makes it\n# skip displaying a list if there is more than one interface.\nd-i netcfg/choose_interface select auto\n\n# Any hostname and domain names assigned from dhcp take precedence over\n# values set here. However, setting the values still prevents the questions\n# from being shown, even if values come from dhcp.\nd-i netcfg/get_hostname string unknown  \nd-i netcfg/get_domain string brugnara.me\n\n# Disable that annoying WEP key dialog.\nd-i netcfg/wireless_wep string\n\n# This may be unwanted if using VM standard netcard\n# If non-free firmware is needed for the network or other hardware, you can\n# configure the installer to always try to load it, without prompting. Or\n# change to false to disable asking.\nd-i hw-detect/load_firmware boolean true\n\n### Mirror settings (selecting httpredir as hostname, the Country doesn't matter)\n# If you select ftp, the mirror/country string does not need to be set.\n#d-i mirror/protocol string ftp\nd-i mirror/country string Austria  \nd-i mirror/http/hostname string httpredir.debian.org  \nd-i mirror/http/directory string /debian  \nd-i mirror/http/proxy string\n\n### Account setup\n# Skip creation of a root account (normal user account will be able to\n# use sudo).\nd-i passwd/root-login boolean false\n\n# Root password, either in clear text\nd-i passwd/root-password password Pa$$w0rd!RT!  \nd-i passwd/root-password-again password Pa$$w0rd!RT!\n\n# To create a normal user account.\nd-i passwd/user-fullname string Devops  \nd-i passwd/username string devops  \n# Normal user's password, either in clear text\nd-i passwd/user-password password Dev0ps  \nd-i passwd/user-password-again password Dev0ps\n\n### Clock and time zone setup\n# Controls whether or not the hardware clock is set to UTC.\nd-i clock-setup/utc boolean true\n\n# You may set this to any valid setting for $TZ; see the contents of\n# /usr/share/zoneinfo/ for valid values.\nd-i time/zone string Europe/Rome\n\n# Controls whether to use NTP to set the clock during the install\nd-i clock-setup/ntp boolean true\n\n### Partitioning\n## Partitioning example\n# If the system has free space you can choose to only partition that space.\n# This is only honoured if partman-auto/method (below) is not set.\nd-i partman-auto/init_automatically_partition select biggest_free  \nd-i partman-auto/method string lvm\n\n# If one of the disks that are going to be automatically partitioned\n# contains an old LVM configuration, the user will normally receive a\n# warning. This can be preseeded away...\nd-i partman-lvm/device_remove_lvm boolean true  \n# The same applies to pre-existing software RAID array:\nd-i partman-md/device_remove_md boolean true  \n# And the same goes for the confirmation to write the lvm partitions.\nd-i partman-lvm/confirm boolean true  \nd-i partman-lvm/confirm_nooverwrite boolean true\n\n# You can choose one of the three predefined partitioning recipes:\n# - atomic: all files in one partition\n# - home:   separate /home partition\n# - multi:  separate /home, /var, and /tmp partitions\nd-i partman-auto/choose_recipe select multi\n\n# This makes partman automatically partition without confirmation.\nd-i partman-md/confirm boolean true  \nd-i partman-partitioning/confirm_write_new_label boolean true  \nd-i partman/choose_partition select finish  \nd-i partman/confirm boolean true  \nd-i partman/confirm_nooverwrite boolean true\n\n### Apt setup\n# Select which update services to use; define the mirrors to be used.\n# Values shown below are the normal defaults.\nd-i apt-setup/services-select multiselect security, updates  \nd-i apt-setup/security_host string security.debian.org\n\n# Individual additional packages to install\nd-i pkgsel/include string openssh-server build-essential python git ntp curl  \n# Whether to upgrade packages after debootstrap.\n# Allowed values: none, safe-upgrade, full-upgrade\nd-i pkgsel/upgrade select none\n\n# Some versions of the installer can report back on what software you have\n# installed, and what software you use. The default is not to report back,\n# but sending reports helps the project determine what software is most\n# popular and include it on CDs.\npopularity-contest popularity-contest/participate boolean true\n\n# This is fairly safe to set, it makes grub install automatically to the MBR\n# if no other operating system is detected on the machine.\nd-i grub-installer/only_debian boolean true\n\n# This one makes grub-installer install to the MBR if it also finds some other\n# OS, which is less safe as it might not be able to boot that other OS.\nd-i grub-installer/with_other_os boolean true\n\n# Due notably to potential USB sticks, the location of the MBR can not be\n# To install to the first device (assuming it is not a USB stick):\nd-i grub-installer/bootdev  string default\n\n# Optional password for grub, either in clear text\nd-i grub-installer/password password !r00tme  \nd-i grub-installer/password-again password !r00tme\n\n# Avoid that last message about the install being complete.\nd-i finish-install/reboot_in_progress note\n\n# This will prevent the installer from ejecting the CD during the reboot,\n# which is useful in some situations.\nd-i cdrom-detect/eject boolean true  \n</code></pre>\n\n<p>Rebuild the iso:</p>\n\n<pre><code># since we didn't added any packages, we can skip recreating the mirror\nbuild-simple-cdd --profiles test --no-do-mirror  \n</code></pre>\n\n<p>Mount the iso and check everything is working as expected. You can change any param in that file, as requested by you.</p>\n\n<h2 id=\"letscustomizemore\">Let's customize more</h2>\n\n<p>So you want to do something more, uh? What about installing MongoDB?</p>\n\n<pre><code>echo '  \napt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 0C49F3730359A14518585931BC711F9BA15703C6\n\necho \"deb http://repo.mongodb.org/apt/debian jessie/mongodb-org/3.4 main\" | tee /etc/apt/sources.list.d/mongodb-org-3.4.list\n\napt-get update\n\napt-get install -y mongodb-org-server  \nservice mongod start\n\n# start on boot\nsystemctl enable mongod.service  \n' &gt; profiles/mongodb.postinst &amp;&amp; chmod +x $_\n\nbuild-simple-cdd --profiles \"test,mongodb\" --no-do-mirror  \n</code></pre>\n\n<h2 id=\"cddconf\">cdd.conf</h2>\n\n<p>I prefer put the cdd build conf into a separate file, as you can see the --profiles flag becomes something to remember when you build your iso.</p>\n\n<pre><code>echo '  \nlocale=en_US  \nkeyboard=it  \nprofiles=test,mongodb  \ndebian-mirror=\"ftp://ftp.at.debian.org/debian\"  \n' &gt; cdd.conf\n\n# we keep the flag --no-do-mirror out of the conf because we are likely going to not use it while creating new profiles with new packages which needs to be downloaded.\necho \"build-simple-cdd --conf ./cdd.conf --no-do-mirror\" &gt; build.sh  \necho \"build-simple-cdd --conf ./cdd.conf\" &gt; full-build.sh\n\nchmod +x build.sh full-build.sh\n\n./build.sh\n</code></pre>\n\n<h2 id=\"docker\">Docker</h2>\n\n<p>In this part we are going to see, how powerful profiles are.</p>\n\n<pre><code>echo \"  \napt-transport-https  \ncurl  \nca-certificates  \nsoftware-properties-common  \n\" &gt; profiles/docker.packages\n\necho '  \ncurl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -  \necho  \"deb https://download.docker.com/linux/debian jessie stable\" &gt; /etc/apt/sources.list.d/docker.list\n\napt-get update  \napt-get -y install docker-ce\n\nservice docker start\n\n# enable docker to non root user\ngroupadd docker  \nusermod -aG docker devops\n\n# start on boot\nsystemctl enable docker  \n' &gt; profiles/docker.postinst\n\n# build and test\n# add docker to profiles list in cdd.conf and then\n./full-build.sh\n</code></pre>\n\n<h2 id=\"combineprofiles\">Combine profiles</h2>\n\n<p>You can create as many profiles you want and use in a combination while installing your machines. In my case, I have a <code>base</code> profile with all the things we need and profiles like <code>mongodb</code> or <code>docker</code>, to finish the customization of a ready machine.</p>\n\n<h2 id=\"backup\">Backup</h2>\n\n<p>As you can easily backup the <code>profiles</code> folder, you can easily recreate your machines. </p>\n\n<h2 id=\"security\">Security</h2>\n\n<p>Preparing a good machine is the key. The goal is to don't have the need to enter as root into the machines, so in our <code>base</code> profile, the last executed command is <code>apt-get remove --purge sudo</code> so the machine is not editable. This prevent to lose some configuration done on the machine and not documented, as always happens...</p>\n\n<h2 id=\"network\">Network</h2>\n\n<p>You may want to rename your host or simply set an IP. For us, the best solution, is a DHCP server, also able to set the hostname, <a href=\"http://daniele.brugnara.me/2017/03/18/dhcpd-name-your-machines/\">as argued here</a>.</p>\n\n<p>Enjoy this wonderful and now well documented, tool!</p>\n\n<h2 id=\"february2019update\">February 2019 Update</h2>\n\n<p>Just tested with Debian 9.8 with no issues.</p>","amp":null,"image":null,"featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2017-03-18 15:40:19","created_by":1,"updated_at":"2019-02-25 09:26:51","updated_by":1,"published_at":"2017-03-18 16:56:17","published_by":1},{"id":6,"uuid":"baff75b3-3fb1-4ee3-9657-80d0c3a7f094","title":"Proxmox net card association with udev","slug":"proxmox-net-card-association-with-udev","markdown":"## udev eth association with Proxmox\n\nIf you are here, you may have the same problem as I encountered. The way you create net card in Proxmox, is not predictable in linux. If you have seen [my article about simple-cdd](http://daniele.brugnara.me/2017/03/18/simple-cdd-a-way-to-provision-you-machines-effortless/), you may better understand why we solved this way.\n\n## udev works with address\n\nYes. It is. But it works with regular expressions, so we can use for our goal. How? Check this `base.postinst` file portion:\n\n```\necho '\nKERNEL==\"eth*\", ATTR{address}==\"*:db:00\", NAME=\"eth0\"\nKERNEL==\"eth*\", ATTR{address}==\"*:db:01\", NAME=\"eth1\"\nKERNEL==\"eth*\", ATTR{address}==\"*:db:02\", NAME=\"eth2\"\nKERNEL==\"eth*\", ATTR{address}==\"*:db:03\", NAME=\"eth3\"\nKERNEL==\"eth*\", ATTR{address}==\"*:db:04\", NAME=\"eth4\"\nKERNEL==\"eth*\", ATTR{address}==\"*:db:05\", NAME=\"eth5\"\nKERNEL==\"eth*\", ATTR{address}==\"*:db:06\", NAME=\"eth6\"\nKERNEL==\"eth*\", ATTR{address}==\"*:db:07\", NAME=\"eth7\"\nKERNEL==\"eth*\", ATTR{address}==\"*:db:08\", NAME=\"eth8\"\nKERNEL==\"eth*\", ATTR{address}==\"*:db:09\", NAME=\"eth9\"\n' > /etc/udev/rules.d/70-persistent-net.rules\n\n```\n\nPreseeding all your VM this way let you have the eth named as you want in linux. Let's see how.\n\n- create a VM in proxmox\n- before starting, edit the eth mac address changing only the last two pairs of chars, with, for example, `:db:04` for having an `eth4` in linux.\n- start the VM\n- check with `ifconfig` the naming\n\nThis solution works good and it is very simple to implement.\n\n\n\n","mobiledoc":null,"html":"<h2 id=\"udevethassociationwithproxmox\">udev eth association with Proxmox</h2>\n\n<p>If you are here, you may have the same problem as I encountered. The way you create net card in Proxmox, is not predictable in linux. If you have seen <a href=\"http://daniele.brugnara.me/2017/03/18/simple-cdd-a-way-to-provision-you-machines-effortless/\">my article about simple-cdd</a>, you may better understand why we solved this way.</p>\n\n<h2 id=\"udevworkswithaddress\">udev works with address</h2>\n\n<p>Yes. It is. But it works with regular expressions, so we can use for our goal. How? Check this <code>base.postinst</code> file portion:</p>\n\n<pre><code>echo '  \nKERNEL==\"eth*\", ATTR{address}==\"*:db:00\", NAME=\"eth0\"  \nKERNEL==\"eth*\", ATTR{address}==\"*:db:01\", NAME=\"eth1\"  \nKERNEL==\"eth*\", ATTR{address}==\"*:db:02\", NAME=\"eth2\"  \nKERNEL==\"eth*\", ATTR{address}==\"*:db:03\", NAME=\"eth3\"  \nKERNEL==\"eth*\", ATTR{address}==\"*:db:04\", NAME=\"eth4\"  \nKERNEL==\"eth*\", ATTR{address}==\"*:db:05\", NAME=\"eth5\"  \nKERNEL==\"eth*\", ATTR{address}==\"*:db:06\", NAME=\"eth6\"  \nKERNEL==\"eth*\", ATTR{address}==\"*:db:07\", NAME=\"eth7\"  \nKERNEL==\"eth*\", ATTR{address}==\"*:db:08\", NAME=\"eth8\"  \nKERNEL==\"eth*\", ATTR{address}==\"*:db:09\", NAME=\"eth9\"  \n' &gt; /etc/udev/rules.d/70-persistent-net.rules\n</code></pre>\n\n<p>Preseeding all your VM this way let you have the eth named as you want in linux. Let's see how.</p>\n\n<ul>\n<li>create a VM in proxmox</li>\n<li>before starting, edit the eth mac address changing only the last two pairs of chars, with, for example, <code>:db:04</code> for having an <code>eth4</code> in linux.</li>\n<li>start the VM</li>\n<li>check with <code>ifconfig</code> the naming</li>\n</ul>\n\n<p>This solution works good and it is very simple to implement.</p>","amp":null,"image":null,"featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2017-03-18 16:16:31","created_by":1,"updated_at":"2017-03-18 17:08:03","updated_by":1,"published_at":"2017-03-18 17:08:03","published_by":1},{"id":7,"uuid":"af968520-18f5-4c64-a149-131bb1d5a39d","title":"dhcpd, name your machines","slug":"dhcpd-name-your-machines","markdown":"As seen in my previous [blog post](http://daniele.brugnara.me/2017/03/18/simple-cdd-a-way-to-provision-you-machines-effortless/), provisioning machines is quite simple, but the hostname must be unique, so we want an automatic way to configure it.\n\n### installation of a dhcpd\n\nThis is not what I want to share, you will find [here the how-to](https://wiki.debian.org/DHCP_Server).\n\n### dhcpd.conf\n\n```\noption domain-name-servers 8.8.8.8, 8.8.4.4;\noption domain-name \"brugnara.me\";\n\ndefault-lease-time 600;\nmax-lease-time 7200;\n\n# Show that we want to be the only DHCP server in this network:\n\nauthoritative;\n\nsubnet 192.168.10.0 netmask 255.255.255.0 {\n    range 192.168.10.101 192.168.10.199;\n    option subnet-mask 255.255.255.0;\n    option broadcast-address 192.168.10.255;\n    option routers 192.168.10.1;\n}\n\nhost proxy02 {\n  hardware ethernet 00:0D:87:B3:DB:01;\n  fixed-address 192.168.10.142;\n  option host-name \"proxy02\";\n}\n```\n\nIf your machines need to talk each other, you might want to connect your dhcp to your dns server to be able to resolve each hostname setted in the dhcpd.conf file, without replicating the configuration in bind, as an example. I'll argue this in a further article.","mobiledoc":null,"html":"<p>As seen in my previous <a href=\"http://daniele.brugnara.me/2017/03/18/simple-cdd-a-way-to-provision-you-machines-effortless/\">blog post</a>, provisioning machines is quite simple, but the hostname must be unique, so we want an automatic way to configure it.</p>\n\n<h3 id=\"installationofadhcpd\">installation of a dhcpd</h3>\n\n<p>This is not what I want to share, you will find <a href=\"https://wiki.debian.org/DHCP_Server\">here the how-to</a>.</p>\n\n<h3 id=\"dhcpdconf\">dhcpd.conf</h3>\n\n<pre><code>option domain-name-servers 8.8.8.8, 8.8.4.4;  \noption domain-name \"brugnara.me\";\n\ndefault-lease-time 600;  \nmax-lease-time 7200;\n\n# Show that we want to be the only DHCP server in this network:\n\nauthoritative;\n\nsubnet 192.168.10.0 netmask 255.255.255.0 {  \n    range 192.168.10.101 192.168.10.199;\n    option subnet-mask 255.255.255.0;\n    option broadcast-address 192.168.10.255;\n    option routers 192.168.10.1;\n}\n\nhost proxy02 {  \n  hardware ethernet 00:0D:87:B3:DB:01;\n  fixed-address 192.168.10.142;\n  option host-name \"proxy02\";\n}\n</code></pre>\n\n<p>If your machines need to talk each other, you might want to connect your dhcp to your dns server to be able to resolve each hostname setted in the dhcpd.conf file, without replicating the configuration in bind, as an example. I'll argue this in a further article.</p>","amp":null,"image":null,"featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2017-03-18 17:07:35","created_by":1,"updated_at":"2017-03-18 17:17:40","updated_by":1,"published_at":"2017-03-18 17:17:40","published_by":1},{"id":8,"uuid":"3a9657b7-345b-485b-be4e-cdfe43f976c0","title":"Advanced provisioning with simple-cdd and git","slug":"advanced-provisioning-with-simple-cdd-and-git","markdown":"Installing machines, is now more easy, as seen in [my previous article](http://daniele.brugnara.me/2017/03/18/simple-cdd-a-way-to-provision-you-machines-effortless/). \n\nWhat happens if we want to update a configuration? If we only rely to the `simple-cdd` way, we are going to rebuild the iso and reinstall our VMs, which is not we always want to do.\n\nIn my case, I have found many tools able to achieve this goal. Chef, PuppetLabs are just two of those. Do you really want to use something you need to learn? Do you have the time to learn something new just to provision your machines once? Not me. Thank you.\n\nAll of us known git and bash, so we are going to use both, hurray!\n\n## provisioning\n\nSimple `profile.postinst` content for `simple-cdd`. We can also do by hand this configuration.\n\n```\ngit clone git@bitbucket.org:your-name-here/server-bootstrap.git /var/bootstrap\nchmod 700 /var/bootstrap\n\n# prepare rc.local\n\necho \"#!/bin/sh\n\n# update repo with bootstrap file\ncd /var/bootstrap\ngit reset --hard\ngit pull origin master\n\ncd /var/bootstrap/service\n/bin/bash bootstrap\n\nexit 0\n\" > /etc/rc.local\n\n# executable only from root, not visible to anyone else\nchmod 100 /etc/rc.local\n```\n\nAs you can see, we are writing a `rc.local` able to update the files at boot time. This allow the machine to auto update with a reboot. \n\nLet's see a simple dhcpd `bootstrap` file:\n\n```\n#!/bin/bash\n\necho \"+-------------------+\"\necho \"| configuring dhcpd |\"\necho \"+-------------------+\"\n\necho \"INTERFACES=\\\"eth1 eth2 eth3\\\"\" > /etc/default/isc-dhcp-server\n\ncp dhcpd.conf /etc/dhcp/dhcpd.conf\n\n/etc/init.d/isc-dhcp-server restart\n\necho \"+-----------+\"\necho \"| all done! |\"\necho \"+-----------+\"\n```\n\nHere's another `bootstrap` for a nodejs service, as an example\n\n```\n#!/bin/bash\n\nIP=192.168.10.41\nPORT=8080\nNODE_VERSION=\"v6.10.0\"\n\n# sysctl configs\n\necho \"+--------------------+\"\necho \"| configuring sysctl |\"\necho \"+--------------------+\"\n\nsysctl -w net.ipv4.ip_forward=1\nsysctl -w net.core.somaxconn=65536\n\nif [ `node -v` = $NODE_VERSION ];\nthen\n    echo \"+-----------------------------------+\"\n    echo \"| node is already on wanted version |\"\n    echo \"+-----------------------------------+\"\nelse\n    echo \"+---------------+\"\n    echo \"| updating node |\"\n    echo \"+---------------+\"\n\n    curl -k https://nodejs.org/dist/$NODE_VERSION/node-$NODE_VERSION-linux-x64.tar.xz | tar xvJ --strip-components=1 -C \"/usr/local\"\nfi\n\necho \"+---------------------------------+\"\necho \"| intalling and upgrading forever |\"\necho \"+---------------------------------+\"\n\nnpm i -g forever\nnpm up -g forever\n\necho \"+----------------+\"\necho \"| updating proxy |\"\necho \"+----------------+\"\n\nchown -R devops:devops /var/www/proxy\nsu -l devops -c \"cd /var/www/proxy; HOST=$IP /bin/bash start.sh\"\nchown -R root:root /var/www/proxy\n\necho \"+----------------+\"\necho \"| iptables stuff |\"\necho \"+----------------+\"\n\n# clean rules\niptables -F -t nat\niptables -F\n\n# NAT users using output eth\niptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\n\necho \"+-----------+\"\necho \"| all done! |\"\necho \"+-----------+\"\n\n```\n\nEnjoy!","mobiledoc":null,"html":"<p>Installing machines, is now more easy, as seen in <a href=\"http://daniele.brugnara.me/2017/03/18/simple-cdd-a-way-to-provision-you-machines-effortless/\">my previous article</a>. </p>\n\n<p>What happens if we want to update a configuration? If we only rely to the <code>simple-cdd</code> way, we are going to rebuild the iso and reinstall our VMs, which is not we always want to do.</p>\n\n<p>In my case, I have found many tools able to achieve this goal. Chef, PuppetLabs are just two of those. Do you really want to use something you need to learn? Do you have the time to learn something new just to provision your machines once? Not me. Thank you.</p>\n\n<p>All of us known git and bash, so we are going to use both, hurray!</p>\n\n<h2 id=\"provisioning\">provisioning</h2>\n\n<p>Simple <code>profile.postinst</code> content for <code>simple-cdd</code>. We can also do by hand this configuration.</p>\n\n<pre><code>git clone git@bitbucket.org:your-name-here/server-bootstrap.git /var/bootstrap  \nchmod 700 /var/bootstrap\n\n# prepare rc.local\n\necho \"#!/bin/sh\n\n# update repo with bootstrap file\ncd /var/bootstrap  \ngit reset --hard  \ngit pull origin master\n\ncd /var/bootstrap/service  \n/bin/bash bootstrap\n\nexit 0  \n\" &gt; /etc/rc.local\n\n# executable only from root, not visible to anyone else\nchmod 100 /etc/rc.local  \n</code></pre>\n\n<p>As you can see, we are writing a <code>rc.local</code> able to update the files at boot time. This allow the machine to auto update with a reboot. </p>\n\n<p>Let's see a simple dhcpd <code>bootstrap</code> file:</p>\n\n<pre><code>#!/bin/bash\n\necho \"+-------------------+\"  \necho \"| configuring dhcpd |\"  \necho \"+-------------------+\"\n\necho \"INTERFACES=\\\"eth1 eth2 eth3\\\"\" &gt; /etc/default/isc-dhcp-server\n\ncp dhcpd.conf /etc/dhcp/dhcpd.conf\n\n/etc/init.d/isc-dhcp-server restart\n\necho \"+-----------+\"  \necho \"| all done! |\"  \necho \"+-----------+\"  \n</code></pre>\n\n<p>Here's another <code>bootstrap</code> for a nodejs service, as an example</p>\n\n<pre><code>#!/bin/bash\n\nIP=192.168.10.41  \nPORT=8080  \nNODE_VERSION=\"v6.10.0\"\n\n# sysctl configs\n\necho \"+--------------------+\"  \necho \"| configuring sysctl |\"  \necho \"+--------------------+\"\n\nsysctl -w net.ipv4.ip_forward=1  \nsysctl -w net.core.somaxconn=65536\n\nif [ `node -v` = $NODE_VERSION ];  \nthen  \n    echo \"+-----------------------------------+\"\n    echo \"| node is already on wanted version |\"\n    echo \"+-----------------------------------+\"\nelse  \n    echo \"+---------------+\"\n    echo \"| updating node |\"\n    echo \"+---------------+\"\n\n    curl -k https://nodejs.org/dist/$NODE_VERSION/node-$NODE_VERSION-linux-x64.tar.xz | tar xvJ --strip-components=1 -C \"/usr/local\"\nfi\n\necho \"+---------------------------------+\"  \necho \"| intalling and upgrading forever |\"  \necho \"+---------------------------------+\"\n\nnpm i -g forever  \nnpm up -g forever\n\necho \"+----------------+\"  \necho \"| updating proxy |\"  \necho \"+----------------+\"\n\nchown -R devops:devops /var/www/proxy  \nsu -l devops -c \"cd /var/www/proxy; HOST=$IP /bin/bash start.sh\"  \nchown -R root:root /var/www/proxy\n\necho \"+----------------+\"  \necho \"| iptables stuff |\"  \necho \"+----------------+\"\n\n# clean rules\niptables -F -t nat  \niptables -F\n\n# NAT users using output eth\niptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\n\necho \"+-----------+\"  \necho \"| all done! |\"  \necho \"+-----------+\"\n</code></pre>\n\n<p>Enjoy!</p>","amp":null,"image":null,"featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2017-03-18 17:11:58","created_by":1,"updated_at":"2017-03-18 17:44:16","updated_by":1,"published_at":"2017-03-18 17:44:16","published_by":1},{"id":9,"uuid":"050af6dd-afb1-47f8-90e5-99483f898c3d","title":"dhcpd and bind9 communication","slug":"dhcpd-and-bind9-communication","markdown":"","mobiledoc":null,"html":"","amp":null,"image":null,"featured":0,"page":0,"status":"draft","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2017-03-18 17:18:18","created_by":1,"updated_at":"2017-03-18 17:18:18","updated_by":1,"published_at":null,"published_by":null},{"id":10,"uuid":"be49fed2-d923-4353-beba-bca24ce18087","title":"ssh-copy-id","slug":"ssh-copy-id","markdown":"","mobiledoc":null,"html":"","amp":null,"image":null,"featured":0,"page":0,"status":"draft","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2017-03-30 06:43:08","created_by":1,"updated_at":"2017-03-30 06:43:08","updated_by":1,"published_at":null,"published_by":null},{"id":11,"uuid":"01de4e51-8ae8-47e3-9d91-9c2953ae89ea","title":"nodejs docker deploy","slug":"nodejs-docker-deploy","markdown":"","mobiledoc":null,"html":"","amp":null,"image":null,"featured":0,"page":0,"status":"draft","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2017-03-30 06:43:40","created_by":1,"updated_at":"2017-03-30 06:43:40","updated_by":1,"published_at":null,"published_by":null},{"id":12,"uuid":"bdd7f777-9d83-447a-9270-632f3fe777fc","title":"nodejs cluster vs haproxy docker","slug":"nodejs-cluster-vs-haproxy-docker","markdown":"","mobiledoc":null,"html":"","amp":null,"image":null,"featured":0,"page":0,"status":"draft","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2017-03-30 06:43:51","created_by":1,"updated_at":"2017-04-02 09:45:00","updated_by":1,"published_at":null,"published_by":null},{"id":13,"uuid":"88f15d45-ff7b-45c9-babe-e32b85c1f087","title":"DD, monitor current status and speed","slug":"dd-know-current-status-and-speed-2","markdown":"\nOne of the most useful command in Linux, is `dd`. We also know that `dd` provides info regarding the current status, using kill:\n\n```\nkill -USR1 <pidof dd>\n```\n\nbut I really prefer the `pv` way (`apt-get install pv`)\n\n```\n# We usually do this way\ndd if=my.iso of=/dev/sdb\n\n# This is the \"pv\" way\ndd if=my.iso | pv | dd of=/dev/sdb\n```\n\nOf course, you need `apt-get install -y pv` before, but piping through `pv`, allow you to see the status, in real time.\n\n```\ndd if=xubuntu-16.04.2-desktop-i386.iso | pv | dd of=/dev/sdb\n1.01GiB 0:06:22 [3.25MiB/s] [           <=>                 ]\n\n# when dd ends, this output is printed, as always\n2543424+0 records in\n2543424+0 records out\n1302233088 bytes (1.3 GB, 1.2 GiB) copied, 382.114 s, 3.4 MB/s\n```","mobiledoc":null,"html":"<p>One of the most useful command in Linux, is <code>dd</code>. We also know that <code>dd</code> provides info regarding the current status, using kill:</p>\n\n<pre><code>kill -USR1 &lt;pidof dd&gt;  \n</code></pre>\n\n<p>but I really prefer the <code>pv</code> way (<code>apt-get install pv</code>)</p>\n\n<pre><code># We usually do this way\ndd if=my.iso of=/dev/sdb\n\n# This is the \"pv\" way\ndd if=my.iso | pv | dd of=/dev/sdb  \n</code></pre>\n\n<p>Of course, you need <code>apt-get install -y pv</code> before, but piping through <code>pv</code>, allow you to see the status, in real time.</p>\n\n<pre><code>dd if=xubuntu-16.04.2-desktop-i386.iso | pv | dd of=/dev/sdb  \n1.01GiB 0:06:22 [3.25MiB/s] [           &lt;=&gt;                 ]\n\n# when dd ends, this output is printed, as always\n2543424+0 records in  \n2543424+0 records out  \n1302233088 bytes (1.3 GB, 1.2 GiB) copied, 382.114 s, 3.4 MB/s  \n</code></pre>","amp":null,"image":null,"featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2017-04-05 07:19:16","created_by":1,"updated_at":"2017-04-15 11:31:53","updated_by":1,"published_at":"2017-04-15 11:31:39","published_by":1},{"id":14,"uuid":"e5489afd-e8eb-4422-8d4d-75cf2849eb8c","title":"keepalived, virtual IP plus alerting","slug":"keepalived-plus-alerting","markdown":"KeepAliveD is a tool you should learn as soon as possible. You are going to need this wonderful instrument and its magnificent powers.\n\nAll starts with a a simple `apt-get install keepalived` and continues with a very short configuration needed.\n\n## requirements\n\nCreate two Debian 8 VM on the same network.\n\n- debianA: 192.168.60.101/24\n- debianB: 192.168.60.102/24\n\nYour firewall must allow `VRRP` protocol communication between clients on the same subnet.\n \n#### Install keepalived:\n\nOn both machines\n\n```\napt-get install -y keepalived\n```\n\n## sysctl\n\nA little tune is required in order to make keepalived working\n\n```\necho \"net.ipv4.ip_nonlocal_bind = 1\" >> /etc/sysctl.conf\nsysctl -p\n```\n\n## keepalived.conf\n> location: /etc/keepalived/keepalived.conf\n\nWe are going to use the very same configuration on all machines despite what said on the official KeepAliveD installation guide, just because I don't want to force a specific machine to always be the MASTER so I let the protocol choose what machine should be the MASTER and who the BACKUP, depending on the `priority` calculated (see next example).\n\n> keepalived.conf\n```\nvrrp_instance VI_1 {\n    interface eth0\n    state MASTER\n    virtual_router_id 100\n    priority 100\n    virtual_ipaddress {\n        192.168.60.100/24 label eth0:1\n    }\n}\n```\n\nAfter you configured all the VMs, simply restart daemon: `service keepalived restart` or `/etc/init.d/keepalived restart`.\n\nOn both VMs, do a `ip addr | grep 192.168` should show something similar to this. The machine with the keepalived ip should be only one, maybe the vm2 in your case\n\n##### vm1\n```\ninet 192.168.60.101/24 ... eth0\nient 192.168.60.100/24 ... eth0:1\n``` \n\n##### vm2\n```\ninet 192.168.60.102/24 ... eth0\n```\n\n### priority based on what happens on the VM\n\nLet's say you want to drop the IP in case the service is no more operational, this is done lowering the priority programmatically on a script base. Lowering the priority means the IP will be assigned to the VM with a greater priority. \n\n> keepalived.conf\n```\nvrrp_script chk_proxy {\n        script \"[ `curl http://localhost:8080/check` = 'ok' ]\"\n        interval 2\n        weight 2\n}\n\nvrrp_instance VI_1 {\n        interface eth1\n        state MASTER\n        virtual_router_id 201\n        priority 100\n        virtual_ipaddress {\n            192.168.60.100/24\n        }\n        track_script {\n            chk_proxy\n        }\n}\n``` \n\nThe `chk_proxy` script is called every `2` seconds. If the exit code is **not** zero, the priority will be lowered by `weight`. This means if one of the machines has the web service down, will have a priority of `98`. If every machine has the web service down, every one will have the same priority and the IP will be assigned randomly to a machine not able to handle the request. Pay attention to this.\n\n#### script\n\nYou can also write an external executable script and set it in the config file. The exit code will count.\n\n- `script \"/var/my.script\"`\n- `script \"ifconfig tap0\"`\n- `script \"pidof mysqld`\n- ...\n\n\n### notification script\n\nBeing notified when a cluster changes its config is a good thing and we want to \"ab\"use this.\n\n> keepalived.conf\n```\nvrrp_script chk_proxy {\n        script \"[ `curl http://localhost:8080/check` = 'ok' ]\"\n        interval 2\n        weight 2\n}\n\nvrrp_instance VI_1 {\n        interface eth1\n        state MASTER\n        virtual_router_id 201\n        priority 100\n        virtual_ipaddress {\n            192.168.60.100/24\n        }\n        track_script {\n            chk_proxy\n        }\n        notify /usr/local/bin/keepalivednotify.sh\n}\n``` \n\n> /usr/local/bin/keepalivednotify.sh\n```\n!/bin/bash\n\n# $1 = “GROUP” or “INSTANCE”\n# $2 = name of group or instance\n# $3 = target state of transition (“MASTER”, “BACKUP”, “FAULT”)\n\nTYPE=$1\nNAME=$2\nSTATE=$3\nHOSTNAME=`hostname`\nTIME=`date`\n\n# scripts doing specific actions, if needed.\nMASTER_SH=\"/var/kad_master.sh\"\nBACKUP_SH=\"/var/kad_backup.sh\"\nFAULTY_SH=\"/var/kad_faulty.sh\"\n\n# notify syslog \nlogger -t kad.notify \"vrrp $NAME ($TYPE) on $HOSTNAME changed his state to $STATE on $TIME\"\n\n# visit mailgun.net for a free account!\ncurl -ks --user \"api:key-MAILGUN-KEY\" \\\n    https://api.mailgun.net/v3/brugnara.me/messages \\\n    -F from=\"KeepAliveD <keepalived@brugnara.me>\" \\\n    -F to=teamdev@brugnara.me \\\n    -F subject=\"[KeepAliveD] $HOSTNAME - $NAME is now $STATE\" \\\n    -F text=\"vrrp $NAME ($TYPE) on $HOSTNAME changed his state to $STATE on $TIME\"\n\ncase $STATE in\n        \"MASTER\")\n                  if [ -f $MASTER_SH ]; then\n                    /bin/bash $MASTER_SH\n                  fi\n                  exit 0\n                  ;;\n        \"BACKUP\") if [ -f $BACKUP_SH ]; then\n                    /bin/bash $BACKUP_SH\n                  fi\n                  exit 0\n                  ;;\n        \"FAULT\")  if [ -f $FAULTY_SH ]; then\n                    /bin/bash $FAULTY_SH\n                  fi\n                  exit 0\n                  ;;\n        *)        echo \"unknown state\"\n                  exit 1\n                  ;;\nesac\n```\n\nFor me it's very useful to take more actions regarding the KeepAliveD status, so here's what they do, just as a share. May not be required for your server farm.\n\n> /var/kad_master.sh\n```\nifconfig tap0 up\nbrctl addif br0 tap0 eth1\nifconfig br0 up\n```\n\n> /var/kad_backup.sh\n```\nifconfig tap0 down\nbrctl delif br0 tap0 eth1\nifconfig br0 down\n```\n\n> /var/kad_faulty.sh\n```\nifconfig tap0 down\nbrctl delif br0 tap0 eth1\nifconfig br0 down\n```\n\nThanks to [this blog post](https://tobrunet.ch/2013/07/keepalived-check-and-notify-scripts/) and also check [this official manual](https://www.google.it/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&uact=8&ved=0ahUKEwjngoSFvKbTAhVGGhQKHcyzCaUQFggjMAA&url=http%3A%2F%2Fwww.keepalived.org%2Fpdf%2FUserGuide.pdf&usg=AFQjCNFMZzJeO1glSPiXRF1SqLRvKO6D0Q&sig2=SMi99aYaTsHF6c51Gd32sw&bvm=bv.152479541,d.bGg) for more details.","mobiledoc":null,"html":"<p>KeepAliveD is a tool you should learn as soon as possible. You are going to need this wonderful instrument and its magnificent powers.</p>\n\n<p>All starts with a a simple <code>apt-get install keepalived</code> and continues with a very short configuration needed.</p>\n\n<h2 id=\"requirements\">requirements</h2>\n\n<p>Create two Debian 8 VM on the same network.</p>\n\n<ul>\n<li>debianA: 192.168.60.101/24</li>\n<li>debianB: 192.168.60.102/24</li>\n</ul>\n\n<p>Your firewall must allow <code>VRRP</code> protocol communication between clients on the same subnet.</p>\n\n<h4 id=\"installkeepalived\">Install keepalived:</h4>\n\n<p>On both machines</p>\n\n<pre><code>apt-get install -y keepalived  \n</code></pre>\n\n<h2 id=\"sysctl\">sysctl</h2>\n\n<p>A little tune is required in order to make keepalived working</p>\n\n<pre><code>echo \"net.ipv4.ip_nonlocal_bind = 1\" &gt;&gt; /etc/sysctl.conf  \nsysctl -p  \n</code></pre>\n\n<h2 id=\"keepalivedconf\">keepalived.conf</h2>\n\n<blockquote>\n  <p>location: /etc/keepalived/keepalived.conf</p>\n</blockquote>\n\n<p>We are going to use the very same configuration on all machines despite what said on the official KeepAliveD installation guide, just because I don't want to force a specific machine to always be the MASTER so I let the protocol choose what machine should be the MASTER and who the BACKUP, depending on the <code>priority</code> calculated (see next example).</p>\n\n<blockquote>\n  <p>keepalived.conf</p>\n</blockquote>\n\n<pre><code>vrrp_instance VI_1 {  \n    interface eth0\n    state MASTER\n    virtual_router_id 100\n    priority 100\n    virtual_ipaddress {\n        192.168.60.100/24 label eth0:1\n    }\n}\n</code></pre>\n\n<p>After you configured all the VMs, simply restart daemon: <code>service keepalived restart</code> or <code>/etc/init.d/keepalived restart</code>.</p>\n\n<p>On both VMs, do a <code>ip addr | grep 192.168</code> should show something similar to this. The machine with the keepalived ip should be only one, maybe the vm2 in your case</p>\n\n<h5 id=\"vm1\">vm1</h5>\n\n<pre><code>inet 192.168.60.101/24 ... eth0  \nient 192.168.60.100/24 ... eth0:1  \n</code></pre>\n\n<h5 id=\"vm2\">vm2</h5>\n\n<pre><code>inet 192.168.60.102/24 ... eth0  \n</code></pre>\n\n<h3 id=\"prioritybasedonwhathappensonthevm\">priority based on what happens on the VM</h3>\n\n<p>Let's say you want to drop the IP in case the service is no more operational, this is done lowering the priority programmatically on a script base. Lowering the priority means the IP will be assigned to the VM with a greater priority. </p>\n\n<blockquote>\n  <p>keepalived.conf</p>\n</blockquote>\n\n<pre><code>vrrp_script chk_proxy {  \n        script \"[ `curl http://localhost:8080/check` = 'ok' ]\"\n        interval 2\n        weight 2\n}\n\nvrrp_instance VI_1 {  \n        interface eth1\n        state MASTER\n        virtual_router_id 201\n        priority 100\n        virtual_ipaddress {\n            192.168.60.100/24\n        }\n        track_script {\n            chk_proxy\n        }\n}\n</code></pre>\n\n<p>The <code>chk_proxy</code> script is called every <code>2</code> seconds. If the exit code is <strong>not</strong> zero, the priority will be lowered by <code>weight</code>. This means if one of the machines has the web service down, will have a priority of <code>98</code>. If every machine has the web service down, every one will have the same priority and the IP will be assigned randomly to a machine not able to handle the request. Pay attention to this.</p>\n\n<h4 id=\"script\">script</h4>\n\n<p>You can also write an external executable script and set it in the config file. The exit code will count.</p>\n\n<ul>\n<li><code>script \"/var/my.script\"</code></li>\n<li><code>script \"ifconfig tap0\"</code></li>\n<li><code>script \"pidof mysqld</code></li>\n<li>...</li>\n</ul>\n\n<h3 id=\"notificationscript\">notification script</h3>\n\n<p>Being notified when a cluster changes its config is a good thing and we want to \"ab\"use this.</p>\n\n<blockquote>\n  <p>keepalived.conf</p>\n</blockquote>\n\n<pre><code>vrrp_script chk_proxy {  \n        script \"[ `curl http://localhost:8080/check` = 'ok' ]\"\n        interval 2\n        weight 2\n}\n\nvrrp_instance VI_1 {  \n        interface eth1\n        state MASTER\n        virtual_router_id 201\n        priority 100\n        virtual_ipaddress {\n            192.168.60.100/24\n        }\n        track_script {\n            chk_proxy\n        }\n        notify /usr/local/bin/keepalivednotify.sh\n}\n</code></pre>\n\n<blockquote>\n  <p>/usr/local/bin/keepalivednotify.sh</p>\n</blockquote>\n\n<pre><code>!/bin/bash\n\n# $1 = “GROUP” or “INSTANCE”\n# $2 = name of group or instance\n# $3 = target state of transition (“MASTER”, “BACKUP”, “FAULT”)\n\nTYPE=$1  \nNAME=$2  \nSTATE=$3  \nHOSTNAME=`hostname`  \nTIME=`date`\n\n# scripts doing specific actions, if needed.\nMASTER_SH=\"/var/kad_master.sh\"  \nBACKUP_SH=\"/var/kad_backup.sh\"  \nFAULTY_SH=\"/var/kad_faulty.sh\"\n\n# notify syslog \nlogger -t kad.notify \"vrrp $NAME ($TYPE) on $HOSTNAME changed his state to $STATE on $TIME\"\n\n# visit mailgun.net for a free account!\ncurl -ks --user \"api:key-MAILGUN-KEY\" \\  \n    https://api.mailgun.net/v3/brugnara.me/messages \\\n    -F from=\"KeepAliveD &lt;keepalived@brugnara.me&gt;\" \\\n    -F to=teamdev@brugnara.me \\\n    -F subject=\"[KeepAliveD] $HOSTNAME - $NAME is now $STATE\" \\\n    -F text=\"vrrp $NAME ($TYPE) on $HOSTNAME changed his state to $STATE on $TIME\"\n\ncase $STATE in  \n        \"MASTER\")\n                  if [ -f $MASTER_SH ]; then\n                    /bin/bash $MASTER_SH\n                  fi\n                  exit 0\n                  ;;\n        \"BACKUP\") if [ -f $BACKUP_SH ]; then\n                    /bin/bash $BACKUP_SH\n                  fi\n                  exit 0\n                  ;;\n        \"FAULT\")  if [ -f $FAULTY_SH ]; then\n                    /bin/bash $FAULTY_SH\n                  fi\n                  exit 0\n                  ;;\n        *)        echo \"unknown state\"\n                  exit 1\n                  ;;\nesac  \n</code></pre>\n\n<p>For me it's very useful to take more actions regarding the KeepAliveD status, so here's what they do, just as a share. May not be required for your server farm.</p>\n\n<blockquote>\n  <p>/var/kad_master.sh</p>\n</blockquote>\n\n<pre><code>ifconfig tap0 up  \nbrctl addif br0 tap0 eth1  \nifconfig br0 up  \n</code></pre>\n\n<blockquote>\n  <p>/var/kad_backup.sh</p>\n</blockquote>\n\n<pre><code>ifconfig tap0 down  \nbrctl delif br0 tap0 eth1  \nifconfig br0 down  \n</code></pre>\n\n<blockquote>\n  <p>/var/kad_faulty.sh</p>\n</blockquote>\n\n<pre><code>ifconfig tap0 down  \nbrctl delif br0 tap0 eth1  \nifconfig br0 down  \n</code></pre>\n\n<p>Thanks to <a href=\"https://tobrunet.ch/2013/07/keepalived-check-and-notify-scripts/\">this blog post</a> and also check <a href=\"https://www.google.it/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;uact=8&amp;ved=0ahUKEwjngoSFvKbTAhVGGhQKHcyzCaUQFggjMAA&amp;url=http%3A%2F%2Fwww.keepalived.org%2Fpdf%2FUserGuide.pdf&amp;usg=AFQjCNFMZzJeO1glSPiXRF1SqLRvKO6D0Q&amp;sig2=SMi99aYaTsHF6c51Gd32sw&amp;bvm=bv.152479541,d.bGg\">this official manual</a> for more details.</p>","amp":null,"image":null,"featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2017-04-05 12:59:00","created_by":1,"updated_at":"2017-04-15 12:33:10","updated_by":1,"published_at":"2017-04-15 12:10:58","published_by":1},{"id":15,"uuid":"91d59e73-ca3a-428a-9366-1b68623cd59e","title":"openvpn, tap vs tun, differences","slug":"openvpn-tap-vs-tun-2","markdown":"While creating an OpenVPN server you should think what you are going to use it for.\n\n## Long story short\n\nUse **tap** for a layer 2 vpn, **tun** for a layer 3.\n\n## tap\n\nTap is a virtual eth interface and, you will be able to put the interface `tap0` into a bridge:\n\n```\napt-get install bridge-utils\nbrctl addbr br0\nbrctl addif br0 tap0 eth0\n```\n\n## tun\n\nTun is for a direct IP connection between two points.\n\n[Link to official OpenVPN page.](https://openvpn.net/index.php/open-source/faq/75-general/305-what-is-the-difference-between-a-tun-device-and-a-tap-device.html)","mobiledoc":null,"html":"<p>While creating an OpenVPN server you should think what you are going to use it for.</p>\n\n<h2 id=\"longstoryshort\">Long story short</h2>\n\n<p>Use <strong>tap</strong> for a layer 2 vpn, <strong>tun</strong> for a layer 3.</p>\n\n<h2 id=\"tap\">tap</h2>\n\n<p>Tap is a virtual eth interface and, you will be able to put the interface <code>tap0</code> into a bridge:</p>\n\n<pre><code>apt-get install bridge-utils  \nbrctl addbr br0  \nbrctl addif br0 tap0 eth0  \n</code></pre>\n\n<h2 id=\"tun\">tun</h2>\n\n<p>Tun is for a direct IP connection between two points.</p>\n\n<p><a href=\"https://openvpn.net/index.php/open-source/faq/75-general/305-what-is-the-difference-between-a-tun-device-and-a-tap-device.html\">Link to official OpenVPN page.</a></p>","amp":null,"image":null,"featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2017-04-05 19:13:59","created_by":1,"updated_at":"2017-04-15 11:05:39","updated_by":1,"published_at":"2017-04-15 11:05:39","published_by":1},{"id":16,"uuid":"efa4e673-ecde-4c03-83da-6680fecd5288","title":"debian preseed, prompt user input","slug":"debian-preseed-prompt-user-input","markdown":"## Debian preseed\n\nAs I told in a previous article, preseeding is very useful, you can do many stuff without the need of an external system like Puppet o Chef. \n\nA problem I encountered while preseeding our farm, was to ask user just some input or to confirm it.\n\nThe solution is very simple but not well documented and after a bit of research, I found the way.\n\n```\n# preseeding the value, this will not be asked.\nd-i netcfg/get_nameservers string 192.168.30.102 192.168.30.103\n\n# applying the `seen false` attribute, will prompt during the install with the value as setted before.\nd-i netcfg/get_nameservers seen false\n```\n\nThis can be used for any other field, here's another example\n\n```\nd-i netcfg/get_hostname string changeme\nd-i netcfg/get_hostname seen false\nd-i netcfg/get_domain string brugnara.me\nd-i netcfg/get_domain seen false\n```","mobiledoc":null,"html":"<h2 id=\"debianpreseed\">Debian preseed</h2>\n\n<p>As I told in a previous article, preseeding is very useful, you can do many stuff without the need of an external system like Puppet o Chef. </p>\n\n<p>A problem I encountered while preseeding our farm, was to ask user just some input or to confirm it.</p>\n\n<p>The solution is very simple but not well documented and after a bit of research, I found the way.</p>\n\n<pre><code># preseeding the value, this will not be asked.\nd-i netcfg/get_nameservers string 192.168.30.102 192.168.30.103\n\n# applying the `seen false` attribute, will prompt during the install with the value as setted before.\nd-i netcfg/get_nameservers seen false  \n</code></pre>\n\n<p>This can be used for any other field, here's another example</p>\n\n<pre><code>d-i netcfg/get_hostname string changeme  \nd-i netcfg/get_hostname seen false  \nd-i netcfg/get_domain string brugnara.me  \nd-i netcfg/get_domain seen false  \n</code></pre>","amp":null,"image":null,"featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2017-04-13 13:20:37","created_by":1,"updated_at":"2017-04-15 10:49:10","updated_by":1,"published_at":"2017-04-15 10:49:10","published_by":1},{"id":17,"uuid":"4ad4ce47-0eb8-4363-91b9-054e14d84af1","title":"GNU awk is required for lib/memtype.h made by memtypes.awk. BSD awk complains: awk: gensub doesn't support backreferences (subst \"\\1\")","slug":"gnu-awk-is-required-for-lib-memtype-h-made-by-memtypes-awk-bsd-awk-complains-awk-gensub-doesnt-support-backreferences-subst-1","markdown":"This error is given when you try to compile `quagga`.\n\nThe easy solution is to\n\n> tested with Debian 8 and Quagga 1.2.1\n\n```\napt-get install -y gawk\n```\n\n## Compile quagga\n\nIf you need more help, here's the list of the needed dependencies to compile correctly. \n\n```\napt-get install -y build-essential gawk libreadline-dev pkg-config libc-ares-dev\n```\n\nAfter this, a simple\n\n```\n./configure [options]\nmake && make install\n```\n\nwill do the rest. Check [this link](http://www.nongnu.org/quagga/docs/docs-multi/The-Configure-script-and-its-options.html#The-Configure-script-and-its-options) for the `./configure` options.","mobiledoc":null,"html":"<p>This error is given when you try to compile <code>quagga</code>.</p>\n\n<p>The easy solution is to</p>\n\n<blockquote>\n  <p>tested with Debian 8 and Quagga 1.2.1</p>\n</blockquote>\n\n<pre><code>apt-get install -y gawk  \n</code></pre>\n\n<h2 id=\"compilequagga\">Compile quagga</h2>\n\n<p>If you need more help, here's the list of the needed dependencies to compile correctly. </p>\n\n<pre><code>apt-get install -y build-essential gawk libreadline-dev pkg-config libc-ares-dev  \n</code></pre>\n\n<p>After this, a simple</p>\n\n<pre><code>./configure [options]\nmake &amp;&amp; make install  \n</code></pre>\n\n<p>will do the rest. Check <a href=\"http://www.nongnu.org/quagga/docs/docs-multi/The-Configure-script-and-its-options.html#The-Configure-script-and-its-options\">this link</a> for the <code>./configure</code> options.</p>","amp":null,"image":null,"featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2017-04-18 07:45:53","created_by":1,"updated_at":"2017-04-18 07:54:25","updated_by":1,"published_at":"2017-04-18 07:54:25","published_by":1},{"id":18,"uuid":"9941cf3c-34bc-487c-b0f4-300653011f04","title":"tt","slug":"tt","markdown":"https://www.devops.zone/tricks/connecting-ssh-drac-reboot-server/\n\nboobs\n```\n|               /             `          '      |             |\n|              .                                 \\            |\n|              |                                  \\           |\n|              |               |                   `.         |\n|              |               ,                     \\        |\n|              |              /:                      `,      |\n|              |             /            \\             \\     |\n|              |            /              \\            ;\\_   |\n|              |           |                .           ::.)  |\n|              |           |         ,::,   |           `:|   |\n|              |          '|        ;:():   |             '   |\n|              |           |         `::'   ':           /    |\n|              |           |.              /::.         /     |\n|              |           |  ,         _,':\"   -.____,'      |\n|              \\           |   `'--..--'        `:|           |\n|               .          |\\                     |           |\n|               |          ||                     |           |\n|               :          .\\                     (           |\n|oglesbee/'02    \\          \\|                    \\           |\n|_________________\\__________\\_____________________\\__________|\n```","mobiledoc":null,"html":"<p><a href=\"https://www.devops.zone/tricks/connecting-ssh-drac-reboot-server/\">https://www.devops.zone/tricks/connecting-ssh-drac-reboot-server/</a></p>\n\n<p>boobs  </p>\n\n<pre><code>|               /             `          '      |             |\n|              .                                 \\            |\n|              |                                  \\           |\n|              |               |                   `.         |\n|              |               ,                     \\        |\n|              |              /:                      `,      |\n|              |             /            \\             \\     |\n|              |            /              \\            ;\\_   |\n|              |           |                .           ::.)  |\n|              |           |         ,::,   |           `:|   |\n|              |          '|        ;:():   |             '   |\n|              |           |         `::'   ':           /    |\n|              |           |.              /::.         /     |\n|              |           |  ,         _,':\"   -.&amp;#95;&amp;#95;&amp;#95;&amp;#95;,'      |\n|              \\           |   `'--..--'        `:|           |\n|               .          |\\                     |           |\n|               |          ||                     |           |\n|               :          .\\                     (           |\n|oglesbee/'02    \\          \\|                    \\           |\n|&amp;#95;&amp;#95;&amp;#95;&amp;#95;&amp;#95;&amp;#95;&amp;#95;&amp;#95;&amp;#95;&amp;#95;&amp;#95;&amp;#95;&amp;#95;&amp;#95;&amp;#95;&amp;#95;&amp;#95;\\&amp;#95;&amp;#95;&amp;#95;&amp;#95;&amp;#95;&amp;#95;&amp;#95;&amp;#95;&amp;#95;&amp;#95;\\&amp;#95;&amp;#95;&amp;#95;&amp;#95;&amp;#95;&amp;#95;&amp;#95;&amp;#95;&amp;#95;&amp;#95;&amp;#95;&amp;#95;&amp;#95;&amp;#95;&amp;#95;&amp;#95;&amp;#95;&amp;#95;&amp;#95;&amp;#95;&amp;#95;\\&amp;#95;&amp;#95;&amp;#95;&amp;#95;&amp;#95;&amp;#95;&amp;#95;&amp;#95;&amp;#95;&amp;#95;|\n</code></pre>","amp":null,"image":null,"featured":0,"page":0,"status":"draft","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2017-04-24 13:56:31","created_by":1,"updated_at":"2017-05-06 11:59:42","updated_by":1,"published_at":null,"published_by":null},{"id":19,"uuid":"fef995ce-1cbf-44d1-9ae0-e675c3427413","title":"disable su on debian","slug":"disable-su-on-debian","markdown":"## is your VM safe enough?\n\n> A VM is only safe when it's powered OFF\n\n## Why?\n\nYou have [prepared your VM with CDD](/2017/03/18/simple-cdd-a-way-to-provision-you-machines-effortless/) and you want to be sure that changes will be saved on the original ISO so editing a live machine, will not be possible. You are forced to firstly update your versioned CDD/ISO so who will come after you, will be able to exactly understand what and why you did.\n\nIn my opinion, the minimal and obvious thing required for a production server, is to disable `root` user login. This happens by default on many recent distros and it is quite useful but the \"default\" user may be able to execute commands via `sudo`, so let's protect against this unwanted behavior.\n\n## How?\n\n```bash\nsudo apt purge sudo\n```\n\nBe aware that if you followed my CDD guide you may have disabled root login so `su` will not work.\n\nAfter this command, no more root commands are permitted.\n\n## Do I need to reinstall for update something?\n\nIt really depends on what you want to update. In my opinion, changing something little, like a configuration, could be handled with a [simple GIT provisioning system](/2017/03/18/advanced-provisioning-with-simple-cdd-and-git/).\n\nFor something more complex, it could be safer if you edit the original ISO and reinstall the SO, this because you will always have a working \"plug-and-play\" ISO that will just work after a fresh install. Just think about a disaster recovery (es: a non repairable RAID that fu**ed the server..)","mobiledoc":null,"html":"<h2 id=\"isyourvmsafeenough\">is your VM safe enough?</h2>\n\n<blockquote>\n  <p>A VM is only safe when it's powered OFF</p>\n</blockquote>\n\n<h2 id=\"why\">Why?</h2>\n\n<p>You have <a href=\"/2017/03/18/simple-cdd-a-way-to-provision-you-machines-effortless/\">prepared your VM with CDD</a> and you want to be sure that changes will be saved on the original ISO so editing a live machine, will not be possible. You are forced to firstly update your versioned CDD/ISO so who will come after you, will be able to exactly understand what and why you did.</p>\n\n<p>In my opinion, the minimal and obvious thing required for a production server, is to disable <code>root</code> user login. This happens by default on many recent distros and it is quite useful but the \"default\" user may be able to execute commands via <code>sudo</code>, so let's protect against this unwanted behavior.</p>\n\n<h2 id=\"how\">How?</h2>\n\n<pre><code class=\"language-bash\">sudo apt purge sudo  \n</code></pre>\n\n<p>Be aware that if you followed my CDD guide you may have disabled root login so <code>su</code> will not work.</p>\n\n<p>After this command, no more root commands are permitted.</p>\n\n<h2 id=\"doineedtoreinstallforupdatesomething\">Do I need to reinstall for update something?</h2>\n\n<p>It really depends on what you want to update. In my opinion, changing something little, like a configuration, could be handled with a <a href=\"/2017/03/18/advanced-provisioning-with-simple-cdd-and-git/\">simple GIT provisioning system</a>.</p>\n\n<p>For something more complex, it could be safer if you edit the original ISO and reinstall the SO, this because you will always have a working \"plug-and-play\" ISO that will just work after a fresh install. Just think about a disaster recovery (es: a non repairable RAID that fu**ed the server..)</p>","amp":null,"image":null,"featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2017-10-19 09:50:09","created_by":1,"updated_at":"2019-05-03 09:45:47","updated_by":1,"published_at":"2019-05-03 09:45:47","published_by":1},{"id":20,"uuid":"42a155af-daa3-4357-aa66-00086a273f42","title":"API with AWS","slug":"api-with-aws","markdown":"Writing a modern web app requires you to have a backend.\nYou have some users you want to let see something specific.\n\n> I'm assuming that you already have a working AWS account\n\n## Introduction to some components\n\n### API Gateway\n\nIs the \"thing\" that accepts connections from the outside and commutes requests to something that is behind him. In our case, the responders are our Lambda functions.\n\n### Lambda\n\nIs where we write our logic. Javascript, .NET, Java, Python. It doesn't event matter: you write a Lambda in the language of your choice. \n\nEvery Lambda are executed in a protected environment, just like containers, and are billed for the execution time multiplied\nby the number of RAM used; time is rounded to the upper 100ms. The complete cost explanation is available [here](https://aws.amazon.com/lambda/pricing/).\n\n**Note:** each 1Gb of RAM also means you have a full vCPU so bear this in mind while you allocate resources to your Lambdas and not just the amount of RAM used by executing your code. You may want 2vCPU because your task has to do many calculations, so give 2Gb RAM and you are done.\n\nA Lambda, is called by the API Gateway with an event object which is something like this:\n\n```json\n{\n  \"body\": \"eyJ0ZXN0IjoiYm9keSJ9\",\n  \"resource\": \"/{proxy+}\",\n  \"path\": \"/path/to/resource\",\n  \"httpMethod\": \"POST\",\n  \"isBase64Encoded\": true,\n  \"queryStringParameters\": {\n    \"foo\": \"bar\"\n  },\n  \"pathParameters\": {\n    \"proxy\": \"/path/to/resource\"\n  },\n  \"stageVariables\": {\n    \"baz\": \"qux\"\n  },\n  \"headers\": {\n    \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\",\n    \"Accept-Encoding\": \"gzip, deflate, sdch\",\n    \"Accept-Language\": \"en-US,en;q=0.8\",\n    \"Cache-Control\": \"max-age=0\",\n    \"CloudFront-Forwarded-Proto\": \"https\",\n    \"CloudFront-Is-Desktop-Viewer\": \"true\",\n    \"CloudFront-Is-Mobile-Viewer\": \"false\",\n    \"CloudFront-Is-SmartTV-Viewer\": \"false\",\n    \"CloudFront-Is-Tablet-Viewer\": \"false\",\n    \"CloudFront-Viewer-Country\": \"US\",\n    \"Host\": \"1234567890.execute-api.eu-central-1.amazonaws.com\",\n    \"Upgrade-Insecure-Requests\": \"1\",\n    \"User-Agent\": \"Custom User Agent String\",\n    \"Via\": \"1.1 08f323deafeb414ce27.cloudfront.net (CloudFront)\",\n    \"X-Amz-Cf-Id\": \"cDehVQoZnx43VYQb9j2-nvCh-9z396Uhbp027Y2JvkCPNLmGJHqlaA==\",\n    \"X-Forwarded-For\": \"127.0.0.1, 127.0.0.2\",\n    \"X-Forwarded-Port\": \"443\",\n    \"X-Forwarded-Proto\": \"https\"\n  },\n  \"requestContext\": {\n    \"accountId\": \"123456789012\",\n    \"resourceId\": \"123456\",\n    \"stage\": \"prod\",\n    \"requestId\": \"c6af9ac6-7b61-11e6-9a41-93e8deadbeef\",\n    \"requestTime\": \"09/Apr/2015:12:34:56 +0000\",\n    \"requestTimeEpoch\": 1428582896000,\n    \"identity\": {\n      \"cognitoIdentityPoolId\": null,\n      \"accountId\": null,\n      \"cognitoIdentityId\": null,\n      \"caller\": null,\n      \"accessKey\": null,\n      \"sourceIp\": \"127.0.0.1\",\n      \"cognitoAuthenticationType\": null,\n      \"cognitoAuthenticationProvider\": null,\n      \"userArn\": null,\n      \"userAgent\": \"Custom User Agent String\",\n      \"user\": null\n    },\n    \"path\": \"/prod/path/to/resource\",\n    \"resourcePath\": \"/{proxy+}\",\n    \"httpMethod\": \"POST\",\n    \"apiId\": \"1234567890\",\n    \"protocol\": \"HTTP/1.1\"\n  }\n}\n```\n\nA Lambda behind an API Gateway must reply with this structure:\n\n```json\n{\n    \"statusCode\": 200,\n    \"headers\": {\n      \"Access-Control-Allow-Origin\": \"*\"\n    },\n    \"body\": \"{\\\"test\\\":\\\"value\\\"}\"\n}\n```\n\n#### Responder helper\n\nA very useful method that produces a valid Lambda response for API Gateway, is this one:\n\n```js\nfunction response (error, data) {\n  let statusCode = 200\n  let status = 'ok'\n\n  if (error) {\n    status = 'ko'\n    if (error.code) {\n      statusCode = error.code\n    }\n  }\n\n  return {\n    statusCode,\n    headers: {\n      'Access-Control-Allow-Origin': '*'\n    },\n    body: JSON.stringify({\n      data,\n      status,\n      error: error ? error.message : undefined\n    })\n  }\n}\n\n// example\n\nexports.handler = async (event, context) => {\n  try {\n    const body = JSON.parse(event.body)\n    const data = await yourDataGetter(body)\n    return response(null, data)\n  } catch (e) {\n    console.error(e)\n    return response(e)\n  }\n}\n```\n\n### Authorizer\n\nAn `authorizer` is a Lambda executed in order to let API Gateway know if the request should or be passed to the Lambda behind or not. The `authorizer` will be called with an event like this:\n\n```json\n{\n  \"type\": \"TOKEN\",\n  \"authorizationToken\": \"incoming-client-token\",\n  \"methodArn\": \"arn:aws:execute-api:eu-central-1:123456789012:example/prod/POST/{proxy+}\"\n}\n```\n\nThe `authorizer` must return a policy-like JSON with as `Effect`, `Allowed` or a `Deny` to the\n`Resource` requested, like:\n\n```json\n{\n    \"principalId\": \"8034sadas7fb810bf\",\n    \"policyDocument\": {\n        \"Version\": \"2012-10-17\",\n        \"Statement\": [\n            {\n                \"Action\": \"execute-api:Invoke\",\n                \"Effect\": \"Allow\",\n                \"Resource\": \"arn:aws:execute-api:eu-central-1:123456789:randomstuff/prod/GET/users\"\n            }\n        ]\n    },\n    \"context\": {\n        \"at_hash\": \"kJ9ogdasWuDx0d1PQ\",\n        \"sub\": \"8daf810bf\",\n        \"website\": \"www.brugnara.me\",\n        \"email_verified\": \"true\",\n        \"iss\": \"https://cognito-idp.eu-central-1.amazonaws.com/eu-central-1_randomuuid\",\n        \"phone_number_verified\": \"false\",\n        \"cognito:username\": \"8034ebd5-424b-4f76-beca-36157qb810bf\",\n        \"given_name\": \"j\",\n        \"locale\": \"it-it\",\n        \"aud\": \"18q331duombk3pmlqr\",\n        \"token_use\": \"id\",\n        \"auth_time\": 1556870107,\n        \"phone_number\": \"+1234567\",\n        \"exp\": 1557878417,\n        \"iat\": 1557874817,\n        \"family_name\": \"family\",\n        \"email\": \"email@test.com\",\n        \"custom:level\": \"1\",\n        \"custom:privacy\": \"1\",\n        \"custom:role\": \"Marketing\"\n    }\n}\n```\n\nIn the above example you can see I populated the `context` with user's info Lambda will be happy to found and use.\n\nAPI Gateway can also cache the authorizer response. This is up to you depending on your needs.\n\n## A simple API\n\nLet's create our first API.\n\nAs a first step, please create a new Lambda; just follow the instructions.\nI strongly recommend that you create a role for each Lambda.\nThis will let you to be granular assigning permissions.\n\nOn the API Gateway panel, let's create a new `API`. Name it `test`.\n\nLet's create our first `method` by clicking the upper select and selecting\n`add method`. A little select in the tree will appears. Select GET and confirm.\n\nSelecting the newly created method, we will be able to customize the backend for that method. Choose **Lambda Function** as `integration type`, flag `Use Lambda Proxy integration` then type in the `Lambda Function` name in the white field.\n\n#### Deploy the API\n\n- Action\n- Deploy API\n- Chose **[New Stage]** in `Deployment stage` \n- Create *preprod* and *production* enviroments\n- deploy both\n\n#### Test\n\nOn the left, click the `Stages` menu of your newly created API (test). The two stages we created will appear. \n\n### preprod + production\n\n\n\n","mobiledoc":null,"html":"<p>Writing a modern web app requires you to have a backend. <br />\nYou have some users you want to let see something specific.</p>\n\n<blockquote>\n  <p>I'm assuming that you already have a working AWS account</p>\n</blockquote>\n\n<h2 id=\"introductiontosomecomponents\">Introduction to some components</h2>\n\n<h3 id=\"apigateway\">API Gateway</h3>\n\n<p>Is the \"thing\" that accepts connections from the outside and commutes requests to something that is behind him. In our case, the responders are our Lambda functions.</p>\n\n<h3 id=\"lambda\">Lambda</h3>\n\n<p>Is where we write our logic. Javascript, .NET, Java, Python. It doesn't event matter: you write a Lambda in the language of your choice. </p>\n\n<p>Every Lambda are executed in a protected environment, just like containers, and are billed for the execution time multiplied <br />\nby the number of RAM used; time is rounded to the upper 100ms. The complete cost explanation is available <a href=\"https://aws.amazon.com/lambda/pricing/\">here</a>.</p>\n\n<p><strong>Note:</strong> each 1Gb of RAM also means you have a full vCPU so bear this in mind while you allocate resources to your Lambdas and not just the amount of RAM used by executing your code. You may want 2vCPU because your task has to do many calculations, so give 2Gb RAM and you are done.</p>\n\n<p>A Lambda, is called by the API Gateway with an event object which is something like this:</p>\n\n<pre><code class=\"language-json\">{\n  \"body\": \"eyJ0ZXN0IjoiYm9keSJ9\",\n  \"resource\": \"/{proxy+}\",\n  \"path\": \"/path/to/resource\",\n  \"httpMethod\": \"POST\",\n  \"isBase64Encoded\": true,\n  \"queryStringParameters\": {\n    \"foo\": \"bar\"\n  },\n  \"pathParameters\": {\n    \"proxy\": \"/path/to/resource\"\n  },\n  \"stageVariables\": {\n    \"baz\": \"qux\"\n  },\n  \"headers\": {\n    \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\",\n    \"Accept-Encoding\": \"gzip, deflate, sdch\",\n    \"Accept-Language\": \"en-US,en;q=0.8\",\n    \"Cache-Control\": \"max-age=0\",\n    \"CloudFront-Forwarded-Proto\": \"https\",\n    \"CloudFront-Is-Desktop-Viewer\": \"true\",\n    \"CloudFront-Is-Mobile-Viewer\": \"false\",\n    \"CloudFront-Is-SmartTV-Viewer\": \"false\",\n    \"CloudFront-Is-Tablet-Viewer\": \"false\",\n    \"CloudFront-Viewer-Country\": \"US\",\n    \"Host\": \"1234567890.execute-api.eu-central-1.amazonaws.com\",\n    \"Upgrade-Insecure-Requests\": \"1\",\n    \"User-Agent\": \"Custom User Agent String\",\n    \"Via\": \"1.1 08f323deafeb414ce27.cloudfront.net (CloudFront)\",\n    \"X-Amz-Cf-Id\": \"cDehVQoZnx43VYQb9j2-nvCh-9z396Uhbp027Y2JvkCPNLmGJHqlaA==\",\n    \"X-Forwarded-For\": \"127.0.0.1, 127.0.0.2\",\n    \"X-Forwarded-Port\": \"443\",\n    \"X-Forwarded-Proto\": \"https\"\n  },\n  \"requestContext\": {\n    \"accountId\": \"123456789012\",\n    \"resourceId\": \"123456\",\n    \"stage\": \"prod\",\n    \"requestId\": \"c6af9ac6-7b61-11e6-9a41-93e8deadbeef\",\n    \"requestTime\": \"09/Apr/2015:12:34:56 +0000\",\n    \"requestTimeEpoch\": 1428582896000,\n    \"identity\": {\n      \"cognitoIdentityPoolId\": null,\n      \"accountId\": null,\n      \"cognitoIdentityId\": null,\n      \"caller\": null,\n      \"accessKey\": null,\n      \"sourceIp\": \"127.0.0.1\",\n      \"cognitoAuthenticationType\": null,\n      \"cognitoAuthenticationProvider\": null,\n      \"userArn\": null,\n      \"userAgent\": \"Custom User Agent String\",\n      \"user\": null\n    },\n    \"path\": \"/prod/path/to/resource\",\n    \"resourcePath\": \"/{proxy+}\",\n    \"httpMethod\": \"POST\",\n    \"apiId\": \"1234567890\",\n    \"protocol\": \"HTTP/1.1\"\n  }\n}\n</code></pre>\n\n<p>A Lambda behind an API Gateway must reply with this structure:</p>\n\n<pre><code class=\"language-json\">{\n    \"statusCode\": 200,\n    \"headers\": {\n      \"Access-Control-Allow-Origin\": \"*\"\n    },\n    \"body\": \"{\\\"test\\\":\\\"value\\\"}\"\n}\n</code></pre>\n\n<h4 id=\"responderhelper\">Responder helper</h4>\n\n<p>A very useful method that produces a valid Lambda response for API Gateway, is this one:</p>\n\n<pre><code class=\"language-js\">function response (error, data) {  \n  let statusCode = 200\n  let status = 'ok'\n\n  if (error) {\n    status = 'ko'\n    if (error.code) {\n      statusCode = error.code\n    }\n  }\n\n  return {\n    statusCode,\n    headers: {\n      'Access-Control-Allow-Origin': '*'\n    },\n    body: JSON.stringify({\n      data,\n      status,\n      error: error ? error.message : undefined\n    })\n  }\n}\n\n// example\n\nexports.handler = async (event, context) =&gt; {  \n  try {\n    const body = JSON.parse(event.body)\n    const data = await yourDataGetter(body)\n    return response(null, data)\n  } catch (e) {\n    console.error(e)\n    return response(e)\n  }\n}\n</code></pre>\n\n<h3 id=\"authorizer\">Authorizer</h3>\n\n<p>An <code>authorizer</code> is a Lambda executed in order to let API Gateway know if the request should or be passed to the Lambda behind or not. The <code>authorizer</code> will be called with an event like this:</p>\n\n<pre><code class=\"language-json\">{\n  \"type\": \"TOKEN\",\n  \"authorizationToken\": \"incoming-client-token\",\n  \"methodArn\": \"arn:aws:execute-api:eu-central-1:123456789012:example/prod/POST/{proxy+}\"\n}\n</code></pre>\n\n<p>The <code>authorizer</code> must return a policy-like JSON with as <code>Effect</code>, <code>Allowed</code> or a <code>Deny</code> to the <br />\n<code>Resource</code> requested, like:</p>\n\n<pre><code class=\"language-json\">{\n    \"principalId\": \"8034sadas7fb810bf\",\n    \"policyDocument\": {\n        \"Version\": \"2012-10-17\",\n        \"Statement\": [\n            {\n                \"Action\": \"execute-api:Invoke\",\n                \"Effect\": \"Allow\",\n                \"Resource\": \"arn:aws:execute-api:eu-central-1:123456789:randomstuff/prod/GET/users\"\n            }\n        ]\n    },\n    \"context\": {\n        \"at_hash\": \"kJ9ogdasWuDx0d1PQ\",\n        \"sub\": \"8daf810bf\",\n        \"website\": \"www.brugnara.me\",\n        \"email_verified\": \"true\",\n        \"iss\": \"https://cognito-idp.eu-central-1.amazonaws.com/eu-central-1_randomuuid\",\n        \"phone_number_verified\": \"false\",\n        \"cognito:username\": \"8034ebd5-424b-4f76-beca-36157qb810bf\",\n        \"given_name\": \"j\",\n        \"locale\": \"it-it\",\n        \"aud\": \"18q331duombk3pmlqr\",\n        \"token_use\": \"id\",\n        \"auth_time\": 1556870107,\n        \"phone_number\": \"+1234567\",\n        \"exp\": 1557878417,\n        \"iat\": 1557874817,\n        \"family_name\": \"family\",\n        \"email\": \"email@test.com\",\n        \"custom:level\": \"1\",\n        \"custom:privacy\": \"1\",\n        \"custom:role\": \"Marketing\"\n    }\n}\n</code></pre>\n\n<p>In the above example you can see I populated the <code>context</code> with user's info Lambda will be happy to found and use.</p>\n\n<p>API Gateway can also cache the authorizer response. This is up to you depending on your needs.</p>\n\n<h2 id=\"asimpleapi\">A simple API</h2>\n\n<p>Let's create our first API.</p>\n\n<p>As a first step, please create a new Lambda; just follow the instructions. <br />\nI strongly recommend that you create a role for each Lambda. <br />\nThis will let you to be granular assigning permissions.</p>\n\n<p>On the API Gateway panel, let's create a new <code>API</code>. Name it <code>test</code>.</p>\n\n<p>Let's create our first <code>method</code> by clicking the upper select and selecting <br />\n<code>add method</code>. A little select in the tree will appears. Select GET and confirm.</p>\n\n<p>Selecting the newly created method, we will be able to customize the backend for that method. Choose <strong>Lambda Function</strong> as <code>integration type</code>, flag <code>Use Lambda Proxy integration</code> then type in the <code>Lambda Function</code> name in the white field.</p>\n\n<h4 id=\"deploytheapi\">Deploy the API</h4>\n\n<ul>\n<li>Action</li>\n<li>Deploy API</li>\n<li>Chose <strong>[New Stage]</strong> in <code>Deployment stage</code> </li>\n<li>Create <em>preprod</em> and <em>production</em> enviroments</li>\n<li>deploy both</li>\n</ul>\n\n<h4 id=\"test\">Test</h4>\n\n<p>On the left, click the <code>Stages</code> menu of your newly created API (test). The two stages we created will appear. </p>\n\n<h3 id=\"preprodproduction\">preprod + production</h3>","amp":null,"image":null,"featured":0,"page":0,"status":"draft","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2019-03-15 14:07:06","created_by":1,"updated_at":"2019-05-03 12:30:09","updated_by":1,"published_at":null,"published_by":null}],"users":[{"id":1,"uuid":"3d098997-bc45-4fda-987f-1de1002d4171","name":"Daniele Brugnara","slug":"daniele","password":"$2a$10$hztmr.J0SrJI4QpENH4IauRrGMKWH0/DKtot4Wtl0ZbhJFu/pQVoi","email":"daniele@brugnara.me","image":"//www.gravatar.com/avatar/40e3afa5e108574a109b430675b898eb?s=250&d=mm&r=x","cover":null,"bio":null,"website":null,"location":"Scurelle, Italy","facebook":null,"twitter":null,"accessibility":null,"status":"active","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"tour":null,"last_login":"2019-11-04 12:47:16","created_at":"2017-01-27 22:16:57","created_by":1,"updated_at":"2019-11-04 12:47:16","updated_by":1}],"roles":[{"id":1,"uuid":"a1e4cecc-7bc5-48f3-af84-c7ab9d99727f","name":"Administrator","description":"Administrators","created_at":"2017-01-27 22:16:56","created_by":1,"updated_at":"2017-01-27 22:16:56","updated_by":1},{"id":2,"uuid":"ff480110-1a14-4cf8-ae9b-bc394e47a2ae","name":"Editor","description":"Editors","created_at":"2017-01-27 22:16:56","created_by":1,"updated_at":"2017-01-27 22:16:56","updated_by":1},{"id":3,"uuid":"b3fa9a0a-13db-4bff-bbb7-df9c2ee0885a","name":"Author","description":"Authors","created_at":"2017-01-27 22:16:56","created_by":1,"updated_at":"2017-01-27 22:16:56","updated_by":1},{"id":4,"uuid":"156b4c63-acce-4769-8537-b015a2d7d9df","name":"Owner","description":"Blog Owner","created_at":"2017-01-27 22:16:56","created_by":1,"updated_at":"2017-01-27 22:16:56","updated_by":1}],"roles_users":[{"id":1,"role_id":4,"user_id":1}],"permissions":[{"id":1,"uuid":"d9b43907-1f97-4eaf-beb6-57f476e3a8ea","name":"Export database","object_type":"db","action_type":"exportContent","object_id":null,"created_at":"2017-01-27 22:16:56","created_by":1,"updated_at":"2017-01-27 22:16:56","updated_by":1},{"id":2,"uuid":"4b42d889-29e8-4bd8-a13c-d98be0befc97","name":"Import database","object_type":"db","action_type":"importContent","object_id":null,"created_at":"2017-01-27 22:16:56","created_by":1,"updated_at":"2017-01-27 22:16:56","updated_by":1},{"id":3,"uuid":"b7d4f011-2ceb-4e67-b069-4f78602f3a64","name":"Delete all content","object_type":"db","action_type":"deleteAllContent","object_id":null,"created_at":"2017-01-27 22:16:56","created_by":1,"updated_at":"2017-01-27 22:16:56","updated_by":1},{"id":4,"uuid":"ad99aa14-6a02-482f-8617-7f8e716eeb93","name":"Send mail","object_type":"mail","action_type":"send","object_id":null,"created_at":"2017-01-27 22:16:56","created_by":1,"updated_at":"2017-01-27 22:16:56","updated_by":1},{"id":5,"uuid":"3e512336-a86c-4186-8d64-616397138ba2","name":"Browse notifications","object_type":"notification","action_type":"browse","object_id":null,"created_at":"2017-01-27 22:16:56","created_by":1,"updated_at":"2017-01-27 22:16:56","updated_by":1},{"id":6,"uuid":"5b951f2b-d9d4-4839-a7fa-ede1d4bf0948","name":"Add notifications","object_type":"notification","action_type":"add","object_id":null,"created_at":"2017-01-27 22:16:56","created_by":1,"updated_at":"2017-01-27 22:16:56","updated_by":1},{"id":7,"uuid":"17e8a46d-7ed4-494a-a0be-eed0d3bdea21","name":"Delete notifications","object_type":"notification","action_type":"destroy","object_id":null,"created_at":"2017-01-27 22:16:56","created_by":1,"updated_at":"2017-01-27 22:16:56","updated_by":1},{"id":8,"uuid":"647c468a-3ec1-44c7-bc6d-a473531a89d2","name":"Browse posts","object_type":"post","action_type":"browse","object_id":null,"created_at":"2017-01-27 22:16:56","created_by":1,"updated_at":"2017-01-27 22:16:56","updated_by":1},{"id":9,"uuid":"eb1ae260-93bf-41d1-a269-9a2bb3e65b4e","name":"Read posts","object_type":"post","action_type":"read","object_id":null,"created_at":"2017-01-27 22:16:56","created_by":1,"updated_at":"2017-01-27 22:16:56","updated_by":1},{"id":10,"uuid":"09cb00bd-a575-471c-8799-4ef9daeb9d1a","name":"Edit posts","object_type":"post","action_type":"edit","object_id":null,"created_at":"2017-01-27 22:16:56","created_by":1,"updated_at":"2017-01-27 22:16:56","updated_by":1},{"id":11,"uuid":"53932710-4e18-4016-841c-78bc9172c6f8","name":"Add posts","object_type":"post","action_type":"add","object_id":null,"created_at":"2017-01-27 22:16:56","created_by":1,"updated_at":"2017-01-27 22:16:56","updated_by":1},{"id":12,"uuid":"037a2ca7-fa7f-4f85-8fc5-c2b67652e6e3","name":"Delete posts","object_type":"post","action_type":"destroy","object_id":null,"created_at":"2017-01-27 22:16:56","created_by":1,"updated_at":"2017-01-27 22:16:56","updated_by":1},{"id":13,"uuid":"bc588f4b-3f40-47ae-afaf-f720bb5600d5","name":"Browse settings","object_type":"setting","action_type":"browse","object_id":null,"created_at":"2017-01-27 22:16:56","created_by":1,"updated_at":"2017-01-27 22:16:56","updated_by":1},{"id":14,"uuid":"a03ac34d-da07-4979-bae5-77adde18ba8e","name":"Read settings","object_type":"setting","action_type":"read","object_id":null,"created_at":"2017-01-27 22:16:56","created_by":1,"updated_at":"2017-01-27 22:16:56","updated_by":1},{"id":15,"uuid":"f3d48043-c02f-418a-b932-33347e7b918a","name":"Edit settings","object_type":"setting","action_type":"edit","object_id":null,"created_at":"2017-01-27 22:16:56","created_by":1,"updated_at":"2017-01-27 22:16:56","updated_by":1},{"id":16,"uuid":"ebcaa033-6406-4802-af7f-e0a1bef7ddfc","name":"Generate slugs","object_type":"slug","action_type":"generate","object_id":null,"created_at":"2017-01-27 22:16:56","created_by":1,"updated_at":"2017-01-27 22:16:56","updated_by":1},{"id":17,"uuid":"979cbaa5-b945-4564-9adf-546bf55f56c9","name":"Browse tags","object_type":"tag","action_type":"browse","object_id":null,"created_at":"2017-01-27 22:16:56","created_by":1,"updated_at":"2017-01-27 22:16:56","updated_by":1},{"id":18,"uuid":"703ecb58-40be-4491-94e3-88df55485981","name":"Read tags","object_type":"tag","action_type":"read","object_id":null,"created_at":"2017-01-27 22:16:56","created_by":1,"updated_at":"2017-01-27 22:16:56","updated_by":1},{"id":19,"uuid":"5e2283b5-20c2-4d7c-b98f-57cd80513d96","name":"Edit tags","object_type":"tag","action_type":"edit","object_id":null,"created_at":"2017-01-27 22:16:56","created_by":1,"updated_at":"2017-01-27 22:16:56","updated_by":1},{"id":20,"uuid":"2a0ab7d9-636e-48e9-968c-4b174e6e73a4","name":"Add tags","object_type":"tag","action_type":"add","object_id":null,"created_at":"2017-01-27 22:16:56","created_by":1,"updated_at":"2017-01-27 22:16:56","updated_by":1},{"id":21,"uuid":"9724952e-adfd-4e46-852c-7145513b1185","name":"Delete tags","object_type":"tag","action_type":"destroy","object_id":null,"created_at":"2017-01-27 22:16:56","created_by":1,"updated_at":"2017-01-27 22:16:56","updated_by":1},{"id":22,"uuid":"e4f3a1bc-1b5a-4430-9cdf-26a4609afc94","name":"Browse themes","object_type":"theme","action_type":"browse","object_id":null,"created_at":"2017-01-27 22:16:56","created_by":1,"updated_at":"2017-01-27 22:16:56","updated_by":1},{"id":23,"uuid":"07b119bf-412b-474c-bba1-92d007f7f573","name":"Edit themes","object_type":"theme","action_type":"edit","object_id":null,"created_at":"2017-01-27 22:16:56","created_by":1,"updated_at":"2017-01-27 22:16:56","updated_by":1},{"id":24,"uuid":"12dd4af9-765f-4a2c-bc47-8c704db48ba3","name":"Upload themes","object_type":"theme","action_type":"add","object_id":null,"created_at":"2017-01-27 22:16:56","created_by":1,"updated_at":"2017-01-27 22:16:56","updated_by":1},{"id":25,"uuid":"403e0528-ce70-4012-989a-4242d5247fa7","name":"Download themes","object_type":"theme","action_type":"read","object_id":null,"created_at":"2017-01-27 22:16:56","created_by":1,"updated_at":"2017-01-27 22:16:56","updated_by":1},{"id":26,"uuid":"24cea32f-db9e-4151-9613-a6f4c4061034","name":"Delete themes","object_type":"theme","action_type":"destroy","object_id":null,"created_at":"2017-01-27 22:16:56","created_by":1,"updated_at":"2017-01-27 22:16:56","updated_by":1},{"id":27,"uuid":"aed69844-2f9b-4783-ae83-37197d17fabb","name":"Browse users","object_type":"user","action_type":"browse","object_id":null,"created_at":"2017-01-27 22:16:56","created_by":1,"updated_at":"2017-01-27 22:16:56","updated_by":1},{"id":28,"uuid":"b50d0666-2b71-4a73-ae1c-5ec6d6dc9223","name":"Read users","object_type":"user","action_type":"read","object_id":null,"created_at":"2017-01-27 22:16:56","created_by":1,"updated_at":"2017-01-27 22:16:56","updated_by":1},{"id":29,"uuid":"341de1a2-38ac-4c1a-b333-160c7dcaa3bb","name":"Edit users","object_type":"user","action_type":"edit","object_id":null,"created_at":"2017-01-27 22:16:56","created_by":1,"updated_at":"2017-01-27 22:16:56","updated_by":1},{"id":30,"uuid":"f1496aa9-1429-4b6e-8a6a-51fc2c349cd3","name":"Add users","object_type":"user","action_type":"add","object_id":null,"created_at":"2017-01-27 22:16:56","created_by":1,"updated_at":"2017-01-27 22:16:56","updated_by":1},{"id":31,"uuid":"4f44e2ac-c278-4a13-a8bc-591dccb02431","name":"Delete users","object_type":"user","action_type":"destroy","object_id":null,"created_at":"2017-01-27 22:16:56","created_by":1,"updated_at":"2017-01-27 22:16:56","updated_by":1},{"id":32,"uuid":"f3c0a142-8fb5-4e3f-adfb-d19889ffd2ce","name":"Assign a role","object_type":"role","action_type":"assign","object_id":null,"created_at":"2017-01-27 22:16:56","created_by":1,"updated_at":"2017-01-27 22:16:56","updated_by":1},{"id":33,"uuid":"ca5b453b-349a-4858-aa6e-1f9c7d49e496","name":"Browse roles","object_type":"role","action_type":"browse","object_id":null,"created_at":"2017-01-27 22:16:57","created_by":1,"updated_at":"2017-01-27 22:16:57","updated_by":1},{"id":34,"uuid":"693b2dee-3215-4651-be68-eb262af3568d","name":"Browse clients","object_type":"client","action_type":"browse","object_id":null,"created_at":"2017-01-27 22:16:57","created_by":1,"updated_at":"2017-01-27 22:16:57","updated_by":1},{"id":35,"uuid":"31c02b92-94da-402d-9601-0fe9f54ef09c","name":"Read clients","object_type":"client","action_type":"read","object_id":null,"created_at":"2017-01-27 22:16:57","created_by":1,"updated_at":"2017-01-27 22:16:57","updated_by":1},{"id":36,"uuid":"04fe8fcf-60ba-49b3-98f0-b9bff5a65208","name":"Edit clients","object_type":"client","action_type":"edit","object_id":null,"created_at":"2017-01-27 22:16:57","created_by":1,"updated_at":"2017-01-27 22:16:57","updated_by":1},{"id":37,"uuid":"37f0effc-8752-4f33-80d0-b49a67b80dcf","name":"Add clients","object_type":"client","action_type":"add","object_id":null,"created_at":"2017-01-27 22:16:57","created_by":1,"updated_at":"2017-01-27 22:16:57","updated_by":1},{"id":38,"uuid":"fb4e617e-6258-4e77-860f-80c2cd4efd7a","name":"Delete clients","object_type":"client","action_type":"destroy","object_id":null,"created_at":"2017-01-27 22:16:57","created_by":1,"updated_at":"2017-01-27 22:16:57","updated_by":1},{"id":39,"uuid":"34008b5d-5554-4207-bb55-9ba2aca3a015","name":"Browse subscribers","object_type":"subscriber","action_type":"browse","object_id":null,"created_at":"2017-01-27 22:16:57","created_by":1,"updated_at":"2017-01-27 22:16:57","updated_by":1},{"id":40,"uuid":"5f0b926f-b1ee-4574-8a4b-06be2d22c544","name":"Read subscribers","object_type":"subscriber","action_type":"read","object_id":null,"created_at":"2017-01-27 22:16:57","created_by":1,"updated_at":"2017-01-27 22:16:57","updated_by":1},{"id":41,"uuid":"08258b00-eb81-4202-b614-da054bd9b432","name":"Edit subscribers","object_type":"subscriber","action_type":"edit","object_id":null,"created_at":"2017-01-27 22:16:57","created_by":1,"updated_at":"2017-01-27 22:16:57","updated_by":1},{"id":42,"uuid":"3d755ae1-29ad-4bdf-a94d-d7a9151d03bc","name":"Add subscribers","object_type":"subscriber","action_type":"add","object_id":null,"created_at":"2017-01-27 22:16:57","created_by":1,"updated_at":"2017-01-27 22:16:57","updated_by":1},{"id":43,"uuid":"cd12699c-a735-4111-8319-76ff46b1a96b","name":"Delete subscribers","object_type":"subscriber","action_type":"destroy","object_id":null,"created_at":"2017-01-27 22:16:57","created_by":1,"updated_at":"2017-01-27 22:16:57","updated_by":1}],"permissions_users":[],"permissions_roles":[{"id":1,"role_id":1,"permission_id":1},{"id":2,"role_id":1,"permission_id":2},{"id":3,"role_id":1,"permission_id":3},{"id":4,"role_id":1,"permission_id":4},{"id":5,"role_id":1,"permission_id":5},{"id":6,"role_id":1,"permission_id":6},{"id":7,"role_id":1,"permission_id":7},{"id":8,"role_id":1,"permission_id":8},{"id":9,"role_id":1,"permission_id":9},{"id":10,"role_id":1,"permission_id":10},{"id":11,"role_id":1,"permission_id":11},{"id":12,"role_id":1,"permission_id":12},{"id":13,"role_id":1,"permission_id":13},{"id":14,"role_id":1,"permission_id":14},{"id":15,"role_id":1,"permission_id":15},{"id":16,"role_id":1,"permission_id":16},{"id":17,"role_id":1,"permission_id":17},{"id":18,"role_id":1,"permission_id":18},{"id":19,"role_id":1,"permission_id":19},{"id":20,"role_id":1,"permission_id":20},{"id":21,"role_id":1,"permission_id":21},{"id":22,"role_id":1,"permission_id":22},{"id":23,"role_id":1,"permission_id":23},{"id":24,"role_id":1,"permission_id":24},{"id":25,"role_id":1,"permission_id":25},{"id":26,"role_id":1,"permission_id":26},{"id":27,"role_id":1,"permission_id":27},{"id":28,"role_id":1,"permission_id":28},{"id":29,"role_id":1,"permission_id":29},{"id":30,"role_id":1,"permission_id":30},{"id":31,"role_id":1,"permission_id":31},{"id":32,"role_id":1,"permission_id":32},{"id":33,"role_id":1,"permission_id":33},{"id":34,"role_id":1,"permission_id":34},{"id":35,"role_id":1,"permission_id":35},{"id":36,"role_id":1,"permission_id":36},{"id":37,"role_id":1,"permission_id":37},{"id":38,"role_id":1,"permission_id":38},{"id":39,"role_id":1,"permission_id":39},{"id":40,"role_id":1,"permission_id":40},{"id":41,"role_id":1,"permission_id":41},{"id":42,"role_id":1,"permission_id":42},{"id":43,"role_id":1,"permission_id":43},{"id":44,"role_id":2,"permission_id":8},{"id":45,"role_id":2,"permission_id":9},{"id":46,"role_id":2,"permission_id":10},{"id":47,"role_id":2,"permission_id":11},{"id":48,"role_id":2,"permission_id":12},{"id":49,"role_id":2,"permission_id":13},{"id":50,"role_id":2,"permission_id":14},{"id":51,"role_id":2,"permission_id":16},{"id":52,"role_id":2,"permission_id":17},{"id":53,"role_id":2,"permission_id":18},{"id":54,"role_id":2,"permission_id":19},{"id":55,"role_id":2,"permission_id":20},{"id":56,"role_id":2,"permission_id":21},{"id":57,"role_id":2,"permission_id":27},{"id":58,"role_id":2,"permission_id":28},{"id":59,"role_id":2,"permission_id":29},{"id":60,"role_id":2,"permission_id":30},{"id":61,"role_id":2,"permission_id":31},{"id":62,"role_id":2,"permission_id":32},{"id":63,"role_id":2,"permission_id":33},{"id":64,"role_id":2,"permission_id":34},{"id":65,"role_id":2,"permission_id":35},{"id":66,"role_id":2,"permission_id":36},{"id":67,"role_id":2,"permission_id":37},{"id":68,"role_id":2,"permission_id":38},{"id":69,"role_id":2,"permission_id":42},{"id":70,"role_id":3,"permission_id":8},{"id":71,"role_id":3,"permission_id":9},{"id":72,"role_id":3,"permission_id":11},{"id":73,"role_id":3,"permission_id":13},{"id":74,"role_id":3,"permission_id":14},{"id":75,"role_id":3,"permission_id":16},{"id":76,"role_id":3,"permission_id":17},{"id":77,"role_id":3,"permission_id":18},{"id":78,"role_id":3,"permission_id":20},{"id":79,"role_id":3,"permission_id":27},{"id":80,"role_id":3,"permission_id":28},{"id":81,"role_id":3,"permission_id":33},{"id":82,"role_id":3,"permission_id":34},{"id":83,"role_id":3,"permission_id":35},{"id":84,"role_id":3,"permission_id":36},{"id":85,"role_id":3,"permission_id":37},{"id":86,"role_id":3,"permission_id":38},{"id":87,"role_id":3,"permission_id":42}],"permissions_apps":[],"settings":[{"id":1,"uuid":"bad73bb4-4646-4f94-8e62-a29de4e741cc","key":"databaseVersion","value":"009","type":"core","created_at":"2017-01-27 22:16:58","created_by":1,"updated_at":"2017-01-27 22:16:58","updated_by":1},{"id":2,"uuid":"b6318f2e-50d5-4d7a-8d8c-2326efc98d7c","key":"dbHash","value":"f3c1e9cf-f768-4ec2-9841-320f911bdf79","type":"core","created_at":"2017-01-27 22:16:58","created_by":1,"updated_at":"2017-01-27 22:16:58","updated_by":1},{"id":3,"uuid":"f1e0b819-f81c-4626-ae7e-58c0110c4865","key":"migrations","value":"{}","type":"core","created_at":"2017-01-27 22:16:58","created_by":1,"updated_at":"2017-01-27 22:16:58","updated_by":1},{"id":4,"uuid":"bc5d566c-7616-48f5-a08a-b0fe77608f53","key":"title","value":"Advanced DevOps","type":"blog","created_at":"2017-01-27 22:16:58","created_by":1,"updated_at":"2017-05-14 15:42:21","updated_by":1},{"id":5,"uuid":"3f720c33-f961-4783-9e4e-6951fa6257b9","key":"description","value":"NodeJS, MongoDB, DevOps and other stuff","type":"blog","created_at":"2017-01-27 22:16:58","created_by":1,"updated_at":"2017-05-14 15:42:21","updated_by":1},{"id":6,"uuid":"b10b9f94-2274-4b29-9ef1-6a4bf64a514b","key":"logo","value":"","type":"blog","created_at":"2017-01-27 22:16:58","created_by":1,"updated_at":"2017-05-14 15:42:21","updated_by":1},{"id":7,"uuid":"064996e6-06f3-400a-b328-89c375ffee84","key":"cover","value":"","type":"blog","created_at":"2017-01-27 22:16:58","created_by":1,"updated_at":"2017-05-14 15:42:21","updated_by":1},{"id":8,"uuid":"2d8f0f1e-74b1-4f11-8e4a-ee5c18818353","key":"defaultLang","value":"en_US","type":"blog","created_at":"2017-01-27 22:16:58","created_by":1,"updated_at":"2017-05-14 15:42:21","updated_by":1},{"id":9,"uuid":"3792a429-8197-43a4-9eaa-271b0c760212","key":"postsPerPage","value":"5","type":"blog","created_at":"2017-01-27 22:16:58","created_by":1,"updated_at":"2017-05-14 15:42:21","updated_by":1},{"id":10,"uuid":"4c1e8ff8-810c-4e33-92d3-054833a7652d","key":"activeTimezone","value":"Europe/Amsterdam","type":"blog","created_at":"2017-01-27 22:16:58","created_by":1,"updated_at":"2017-05-14 15:42:21","updated_by":1},{"id":11,"uuid":"eeb278d5-fd45-4ecb-87aa-22cf89e211c1","key":"forceI18n","value":"true","type":"blog","created_at":"2017-01-27 22:16:58","created_by":1,"updated_at":"2017-05-14 15:42:21","updated_by":1},{"id":12,"uuid":"4f2ae06a-2c9d-497a-a771-212e1d8bdc6e","key":"permalinks","value":"/:year/:month/:day/:slug/","type":"blog","created_at":"2017-01-27 22:16:58","created_by":1,"updated_at":"2017-05-14 15:42:21","updated_by":1},{"id":13,"uuid":"b26b1f49-55df-4c5e-8a63-96803fa95455","key":"amp","value":"true","type":"blog","created_at":"2017-01-27 22:16:58","created_by":1,"updated_at":"2017-05-14 15:42:21","updated_by":1},{"id":14,"uuid":"8c338db2-c50c-4121-822a-426168b52fb5","key":"ghost_head","value":"","type":"blog","created_at":"2017-01-27 22:16:58","created_by":1,"updated_at":"2017-05-14 15:42:21","updated_by":1},{"id":15,"uuid":"b8ac2b62-de35-48e8-bfec-cdb5c2f2fae4","key":"ghost_foot","value":"","type":"blog","created_at":"2017-01-27 22:16:58","created_by":1,"updated_at":"2017-05-14 15:42:21","updated_by":1},{"id":16,"uuid":"3c1ee812-c5cc-4136-abaf-5f780fb51fbf","key":"facebook","value":"brugnarad","type":"blog","created_at":"2017-01-27 22:16:58","created_by":1,"updated_at":"2017-05-14 15:42:21","updated_by":1},{"id":17,"uuid":"67649c40-c876-4b0d-a84a-83edb84e5f31","key":"twitter","value":"@brugnarad","type":"blog","created_at":"2017-01-27 22:16:58","created_by":1,"updated_at":"2017-05-14 15:42:21","updated_by":1},{"id":18,"uuid":"b669cdb4-5957-4846-a395-f5219dc86b9f","key":"labs","value":"{\"subscribers\":true}","type":"blog","created_at":"2017-01-27 22:16:58","created_by":1,"updated_at":"2017-05-14 15:42:21","updated_by":1},{"id":19,"uuid":"29a70746-544b-4f6b-a3ed-69a6bc6a9989","key":"navigation","value":"[{\"label\":\"Home\",\"url\":\"/\"}]","type":"blog","created_at":"2017-01-27 22:16:58","created_by":1,"updated_at":"2017-05-14 15:42:21","updated_by":1},{"id":20,"uuid":"14c91ae4-8fe3-4762-bc1c-f9648b039317","key":"slack","value":"[{\"url\":\"\"}]","type":"blog","created_at":"2017-01-27 22:16:58","created_by":1,"updated_at":"2017-05-14 15:42:21","updated_by":1},{"id":21,"uuid":"bd025ae8-f4ff-41d8-bcf8-60574888f9ec","key":"activeApps","value":"[]","type":"app","created_at":"2017-01-27 22:16:58","created_by":1,"updated_at":"2017-01-27 22:16:58","updated_by":1},{"id":22,"uuid":"1f7fdd5e-95be-415d-92cf-47573426165c","key":"installedApps","value":"[]","type":"app","created_at":"2017-01-27 22:16:58","created_by":1,"updated_at":"2018-03-12 09:20:39","updated_by":1},{"id":23,"uuid":"93bd1a35-fb36-4a10-bcda-c2ac82b7f17d","key":"isPrivate","value":"false","type":"private","created_at":"2017-01-27 22:16:58","created_by":1,"updated_at":"2017-05-14 15:42:21","updated_by":1},{"id":24,"uuid":"9a1bedfd-10f4-41e3-83d4-9018fc171c5c","key":"password","value":"judawo46","type":"private","created_at":"2017-01-27 22:16:58","created_by":1,"updated_at":"2017-05-14 15:42:21","updated_by":1},{"id":25,"uuid":"7f635a04-370c-4764-9d80-1d7084bf2071","key":"activeTheme","value":"ghostwriter-master","type":"theme","created_at":"2017-01-27 22:16:58","created_by":1,"updated_at":"2017-05-14 15:42:21","updated_by":1},{"id":26,"uuid":"cbdf1bb1-fa54-4801-94ba-ee5b2f9fbcd3","key":"nextUpdateCheck","value":"1572958005","type":"core","created_at":"2017-01-27 22:16:58","created_by":1,"updated_at":"2019-11-04 12:46:45","updated_by":1},{"id":27,"uuid":"07293d43-d67a-4749-8ce0-14a0ce40b5cf","key":"displayUpdateNotification","value":"0.11.14","type":"core","created_at":"2017-01-27 22:16:58","created_by":1,"updated_at":"2019-11-04 12:46:45","updated_by":1},{"id":28,"uuid":"ad329630-d4f9-43ce-8d62-cb44456b1cc6","key":"seenNotifications","value":"[]","type":"core","created_at":"2017-01-27 22:16:58","created_by":1,"updated_at":"2017-01-27 22:16:58","updated_by":1}],"tags":[{"id":1,"uuid":"f55ef86e-d62a-4b6e-a365-fa4b99790d2e","name":"Getting Started","slug":"getting-started","description":null,"image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-01-27 22:16:56","created_by":1,"updated_at":"2017-01-27 22:16:56","updated_by":1}],"posts_tags":[{"id":1,"post_id":1,"tag_id":1,"sort_order":0}],"apps":[],"app_settings":[],"app_fields":[],"subscribers":[]}}]}